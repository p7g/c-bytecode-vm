import array;
import module;
import test;

export function test_if() {
    let n;
    if (true) {
        n = 1;
    } else {
        n = 2;
    }
    test.assert(n == 1);
    if (false) {
        n = 3;
    } else {
        n = 4;
    }
    test.assert(n == 4);
}

export function test_while() {
    let ns = array.new(10);
    let i = 0;
    while (i < 10) {
        ns[i] = 10 - i;
        i = i + 1;
    }
    test.assert(ns = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
}

export function test_break() {
    while (false) {
        break;
        test.assert(false);
    }
}

export function test_continue() {
    let n = 1;
    for (let i = 1; i <= 5; i = i + 1) {
        if (i == 3) {
            continue;
        }
        n = n * i;
    }
    test.assert(n == 40);
}

export function test_return() {
    test.assert(function () {
        return 123;
        return 234;
    }() == 123);
}

export function test_loop_in_global_scope() {
    module.import_("global_loop", "tests/global_loop.rbcvm");
}

export function test_try_catch() {
    let did_run = false;
    let err_value = "hello world";

    try {
        throw err_value;
        did_run = true;
    } catch (e) {
        test.assert(e == err_value);
    }

    test.assert(!did_run);
}

export function test_nested_try() {
    let caught1 = false;
    let caught2 = false;
    try {
        try {
            throw "test";
        } catch (e2) {
            caught2 = true;
            test.assert(e2 == "test");
        }
    } catch (e1) {
        caught1 = true;
    }
    test.assert(!caught1);
    test.assert(caught2);
}

export function test_nested_try2() {
    let caught1 = false;
    let caught2 = false;
    try {
        try {
            throw "test";
        } catch (e) {
            test.assert(e == "test");
            caught1 = true;
            throw e;
        }
    } catch (e) {
        test.assert(e == "test");
        caught2 = true;
    }
    test.assert(caught1);
    test.assert(caught2);
}

export function test_catch_function() {
    function throws() {
        throw "hello";
    }

    let passed = false;
    let caught = false;
    try {
        throws();
        passed = true;
    } catch (e) {
        caught = true;
        test.assert(e == "hello");
    }
    test.assert(!passed);
    test.assert(caught);
}

export function test_break_in_try() {
    let wtf = false;
    let fine = false;
    try {
        while (true) {
            try {
                break;
            } catch {
                wtf = true;
                break;
            }
        }
        throw "error";
    } catch {
        fine = true;
    }

    test.assert(!wtf);
    test.assert(fine);
}

export function test_continue_in_try() {
    let wtf = false;
    let fine = false;
    try {
        for (let i = 0; i < 2; i = i + 1) {
            if (i == 1) {
                throw "error";
            }
            try {
                continue;
            } catch {
                wtf = true;
                break;
            }
        }
    } catch {
        fine = true;
    }

    test.assert(!wtf);
    test.assert(fine);
}