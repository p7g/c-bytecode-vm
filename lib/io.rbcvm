import bytes;
import iter;
import math;
import string;

let MIN_READ = 2048;
let MIN_WRITE = 2048;

export struct BufferedIO {
    read,
    read_buffer,
    write,
    write_buffer,
}

export function buffer(read, write) {
    return BufferedIO {
        read = read,
        read_buffer = bytes::new(0),
        write = write,
        write_buffer = bytes::new(0),
    };
}

export function read(reader, amount) {
    let buflen;

    if (bytes::length(reader.read_buffer) == 0) {
        reader.read_buffer = reader.read(math::max(MIN_READ, amount));
    }

    let end = math::min(amount, bytes::length(reader.read_buffer));
    let result = bytes::slice(reader.read_buffer, 0, end);
    reader.read_buffer = bytes::slice(reader.read_buffer, end);
    return result;
}

export function unread(reader, bytes) {
    reader.read_buffer = bytes::concat(bytes, reader.read_buffer);
}

# TODO: add max size
export function readto(reader, sequence) {
    let seqlen = bytes::length(sequence);
    let buf = read(reader, MIN_READ);
    let i = 0;

    for (; i < bytes::length(buf); i += 1) {
        let match = true;
        for (let j = 0; j < seqlen; j += 1) {
            if (i + j > bytes::length(buf)) {
                buf = bytes::concat(buf, read(reader, MIN_READ));
                if (i + j > bytes::length(buf)) {
                    return buf;
                }
            }

            if (bytes::get(buf, i + j) != bytes::get(sequence, j)) {
                match = false;
                break;
            }
        }

        if (match) {
            let result = bytes::slice(buf, 0, i + seqlen);
            unread(reader, bytes::slice(buf, i + seqlen));
            return result;
        }
    }

    return buf;
}

export function lines(reader, line_ending="\n") {
    let seq = string::bytes(line_ending);
    return function lines_next() {
        let bytes = readto(reader, seq);
        if (bytes::length(bytes) == 0) {
            return iter::STOP;
        }
        let end = bytes::length(bytes) - bytes::length(seq);
        return bytes::slice(bytes, 0, end);
    };
}

export function write(writer, data) {
    writer.write_buffer = bytes::concat(writer.write_buffer, data);
    if (bytes::length(writer.write_buffer) >= MIN_WRITE) {
        writer.write(data);
        writer.write_buffer = bytes::new(0);
    }
}

export function flush(writer) {
    writer.write(writer.write_buffer);
    writer.write_buffer = bytes::new(0);
}