import array;
import docs;
import hash;
import iter;

let doc = docs::module("hashmap", "An implementation of a hash map.");

let INITIAL_CAPACITY = toint(2 ** 3);
let LOAD_FACTOR = 0.7;
let TOMBSTONE = struct {};

export struct HashMap {
  cap, load, hash_fn, buckets, first_insert, last_insert
}

struct Bucket { key, value, prev, next }

let default_hash = hash::primitive;

function do_hash(self, key) {
  return self.hash_fn(key) & self.cap - 1;
}

function grow(self) {
  let cap = self.cap = self.cap * 2;

  let old_buckets = self.buckets;
  self.buckets = array::new(cap);
  self.load = 0;

  let bucket = self.first_insert;
  self.first_insert = self.last_insert = null;
  for (let bucket = self.first_insert; bucket; bucket = bucket.next) {
    set(self, bucket.key, bucket.value);
  }
}

function next_hash(self, hash) {
  return (hash + 1) % self.cap;
}

# public

export struct Options {
    initial_capacity,
    hash_function,
}

let DEFAULT_OPTIONS = Options {
    initial_capacity = INITIAL_CAPACITY,
    hash_function = default_hash,
};

export function collector(options=DEFAULT_OPTIONS) {
  return iter::collector {
    init = function () { return new(options); },
    reduce = function (map, [key, value]) {
      set(map, key, value);
      return map;
    },
    finalize = function (map) { return map; },
  };
}

doc.add(
    "function",
    "collector(options=...)",
    "Create a collector for converting an iterator of entries into a hashmap.",
);

export function new(options=DEFAULT_OPTIONS) {
  return HashMap{
    cap=options.initial_capacity,
    load=0,
    hash_fn=options.hash_function,
    buckets=array::new(options.initial_capacity),
    first_insert=null,
    last_insert=null,
  };
}

doc.add(
    "function",
    "new(options=...)",
    "Create a hashmap in the default configuration. Pass `options` to override the defaults.",
);

export function clear(self) {
  self.buckets = array::new(self.capacity);
  self.first_insert = self.last_insert = null;
  self.load = 0;
}

doc.add("function", "clear(map)", "Delete all values from the map.");

export function get(self, key) {
  let hashed = do_hash(self, key);
  let bucket = self.buckets[hashed];

  if (bucket == null) {
    return null;
  }

  while (bucket != null && (bucket == TOMBSTONE || bucket.key != key)) {
    hashed = next_hash(self, hashed);
    bucket = self.buckets[hashed];
  }

  return bucket.value;
}

doc.add("function", "get(map, key)", "Get the value associated with `key` from `map`.");

export function set(self, key, value) {
  let hashed = do_hash(self, key);

  let bucket;
  while (true) {
    bucket = self.buckets[hashed];
    if (bucket == null || bucket == TOMBSTONE || bucket.key == key) {
      break;
    }
    hashed = next_hash(self, hashed);
  }

  if (bucket && bucket != TOMBSTONE) {
    bucket.value = value;
  } else {
    let bucket = Bucket { key=key, value=value, prev=self.last_insert };
    self.buckets[hashed] = bucket;
    if (!self.first_insert) {
      self.first_insert = self.last_insert = bucket;
    } else {
      self.last_insert.next = bucket;
      self.last_insert = bucket;
    }
    self.load = self.load + 1;

    if (self.load / self.cap > LOAD_FACTOR) {
      grow(self);
    }
  }
}

doc.add(
  "function",
  "set(map, key, value)",
  "Set the value associated with `key` in `map` to `value`.",
);

export function delete(self, key) {
  let hashed = do_hash(self, key);

  let bucket;
  while (true) {
    bucket = self.buckets[hashed];
    if (!bucket) {
      return false;
    }
    if (bucket != TOMBSTONE && bucket.key == key) {
      break;
    }
    hashed = next_hash(self, hashed);
  }

  bucket.next.prev = bucket.prev;
  bucket.prev.next = bucket.next;
  self.buckets[hashed] = TOMBSTONE;
  self.load = self.load - 1;
  return true;
}

doc.add("function", "delete(map, key)", "Delete `key` from `map`.");

export function has(self, key) {
  let hashed = do_hash(self, key);

  while (true) {
    let bucket = self.buckets[hashed];
    if (!bucket) {
      return false;
    }
    if (bucket != TOMBSTONE && bucket.key == key) {
      return true;
    }
    hashed = next_hash(self, hashed);
  }
}

doc.add("function", "has(map, key)", "Check if `map` has a value for `key`.");

export function entries(self) {
  let bucket = self.first_insert;

  return function next() {
    if (bucket == null) {
      return iter::STOP;
    }
    let result = [bucket.key, bucket.value];
    bucket = bucket.next;
    return result;
  };
}

doc.add("function", "entries(map)", "Get an iterator over the key-value pairs in `map`.");

export let iter = entries;

doc.add("function", "iter(map)", "Get an iterator over the key-value pairs in `map`.");

export function size(self) {
  return self.load;
}

doc.add("function", "size(map)", "Return the number of values in `map`.");

export function keys(self) {
  return iter::map(entries(self), function ([k]) { return k; });
}

doc.add("function", "keys(map)", "Get an iterator over the keys in `map`.");

export function values(self) {
  return iter::map(entries(self), function ([_, v]) { return v; });
}

doc.add("function", "values(map)", "Get an iterator over the values in `map`.");

export function make(init_fn, options=DEFAULT_OPTIONS) {
  let map = new(options);

  init_fn(function(k, v) {
    set(map, k, v);
  });

  return map;
}

doc.add(
  "function",
  "make(init, options=...)",
  "Make a new hashmap with `hash` as its hash functions, and call `init` to
initialize the map.

The `init` function receives a function that can be called with a key and value
to set them on the new map.",
);

export function from_entries(entries, options=DEFAULT_OPTIONS) {
  let map = new(options);
  extend(map, entries);
  return map;
}

doc.add(
  "function",
  "from_entries(entries, options=...)",
  "Create a new hashmap with the given `options`, and populate it from the
iterator of key-value pairs `entries`.",
);

export function extend(map, entries) {
  iter::foreach(entries, function([k, v]) {
    set(map, k, v);
  });
}

doc.add(
  "function",
  "extend(map, entries)",
  "Add each key-value pair in the `entries` iterator to `map`.",
);