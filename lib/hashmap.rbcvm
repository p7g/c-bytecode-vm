module HashMap;

import "array.rbcvm";
import "assoclist.rbcvm";
import "hash.rbcvm";
import "string.rbcvm";

let INITIAL_CAPACITY = 2 ** 3;
let LOAD_FACTOR = 0.7;

# hashmap

struct HashMap {
  cap, load, hash_fn, buckets
}

# members

function hash_string(str) {
  return Hash.fnv1a(string_bytes(str));
}

function do_hash(self, key) {
  return self:hash_fn(key) & self:cap - 1;
}

function grow(self) {
  let cap = self:cap = self:cap * 2;

  let old_buckets = self:buckets;
  self:buckets = Array.new(cap);
  self:load = 0;

  Array.foreach(oldbuckets, function(bucket) {
    Array.foreach(AssocList.entries(bucket), function(entry) {
      set(self, entry[0], entry[1]);
    });
  });
}

# public

export function with_capacity(capacity) {
  return HashMap{
    cap=capacity,
    load=0,
    hash_fn=hash_string,
    buckets=Array.new(capacity),
  };
}

export function new() {
  return with_capacity(INITIAL_CAPACITY);
}

export function set_hash_function(self, func) {
  self:hash_fn = func;
}

export function get(self, key) {
  let hashed = do_hash(self, key);
  let bucket = self:buckets[hashed];

  if (bucket == null) {
    return null;
  }

  return AssocList.get(bucket, key);
}

export function set(self, key, value) {
  let hashed = do_hash(self, key);
  let bucket = self:buckets[hashed];

  if (bucket == null) {
    bucket = AssocList.new();
    self:load = self:load + 1;
    self:buckets[hashed] = bucket;
  }

  AssocList.set(bucket, key, value);

  if (self:load / self:cap < LOAD_FACTOR) {
    grow(self);
  }
}

export function delete(self, key) {
  let hashed = do_hash(self, key);
  let bucket = self:buckets[hashed];
  if (!bucket) {
    return false;
  }

  if (AssocList.delete(bucket, key)) {
    if (AssocList.is_empty(bucket)) {
      self:buckets[hashed] = null;
      self:load = self:load - 1;
    }
    return true;
  }
  return false;
}

export function make_with_hash_function(hash, init_fn) {
  let map = new();
  set_hash_function(map, hash);

  init_fn(function(k, v) {
    set(map, k, v);
  });

  return map;
}

export function make(init_fn) {
  return make_with_hash_function(hash_string, init_fn);
}
