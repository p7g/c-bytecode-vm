import array;
import arraylist;
import docs;
import hash;
import iter;

let doc = docs.module("hashmap", "An implementation of a hash map.");

let INITIAL_CAPACITY = toint(2 ** 3);
let LOAD_FACTOR = 0.7;

struct HashMap {
  cap, load, hash_fn, buckets
}

struct Bucket { key, value }

let default_hash = hash.string;

function do_hash(self, key) {
  return self:hash_fn(key) & self:cap - 1;
}

function grow(self) {
  let cap = self:cap = self:cap * 2;

  let old_buckets = self:buckets;
  self:buckets = array.new(cap);
  self:load = 0;

  array.foreach(old_buckets, function(bucket) {
    if (!bucket) {
      return;
    }
    set(self, bucket:key, bucket:value);
  });
}

function next_hash(self, hash) {
  return (hash + 1) % self:cap;
}

# public

export function collector(hash_fn=default_hash) {
  return iter.collector {
    init = function () { return with_hash_function(hash_fn); },
    reduce = function (map, [key, value]) {
      set(map, key, value);
      return map;
    },
    finalize = function (map) { return map; },
  };
}

doc:add("function", "collector(hash_fn=...)", "Create a collector for converting
an iterator of entries into a hashmap.");

export function with_capacity(capacity) {
  return HashMap{
    cap=capacity,
    load=0,
    hash_fn=default_hash,
    buckets=array.new(capacity),
  };
}

doc:add("function", "with_capacity(n)", "Create a new hashmap with `n` buckets.");

export function new() {
  return with_capacity(INITIAL_CAPACITY);
}

doc:add("function", "new()", "Create a hashmap in the default configuration.");

export function set_hash_function(self, func) {
  self:hash_fn = func;
}

doc:add(
  "function",
  "set_hash_function(map, func)",
  "Set the hash function used by `map` to `func`.",
);

export function with_hash_function(hash_function) {
  let m = new();
  set_hash_function(m, hash_function);
  return m;
}

doc:add(
  "function",
  "with_hash_function(func)",
  "Create a new hash map that uses `func` as its hash function.",
);

export function clear(self) {
  self:buckets = array.new(self:capacity);
  self:load = 0;
}

doc:add("function", "clear(map)", "Delete all values from the map.");

export function get(self, key) {
  let hashed = do_hash(self, key);
  let bucket = self:buckets[hashed];

  if (bucket == null) {
    return null;
  }

  while (bucket:key != key) {
    hashed = next_hash(self, hashed);
    bucket = self:buckets[hashed];
  }

  return bucket:value;
}

doc:add("function", "get(map, key)", "Get the value associated with `key` from `map`.");

export function set(self, key, value) {
  let hashed = do_hash(self, key);

  let bucket;
  while (true) {
    bucket = self:buckets[hashed];
    if (bucket == null || bucket:key == key) {
      break;
    }
    hashed = next_hash(self, hashed);
  }

  if (bucket) {
    bucket:value = value;
  } else {
    self:buckets[hashed] = Bucket { key=key, value=value };
    self:load = self:load + 1;

    if (self:load / self:cap > LOAD_FACTOR) {
      grow(self);
    }
  }
}

doc:add(
  "function",
  "set(map, key, value)",
  "Set the value associated with `key` in `map` to `value`.",
);

export function delete(self, key) {
  let hashed = do_hash(self, key);

  let bucket;
  while (true) {
    bucket = self:buckets[hashed];
    if (!bucket) {
      return false;
    }
    if (bucket:key == key) {
      break;
    }
    hashed = next_hash(self, hashed);
  }

  self:buckets[hashed] = null;
  self:load = self:load - 1;
  return true;
}

doc:add("function", "delete(map, key)", "Delete `key` from `map`.");

export function has(self, key) {
  let hashed = do_hash(self, key);

  while (true) {
    let bucket = self:buckets[hashed];
    if (!bucket) {
      return false;
    }
    if (bucket:key == key) {
      return true;
    }
    hashed = next_hash(self, hashed);
  }
}

doc:add("function", "has(map, key)", "Check if `map` has a value for `key`.");

export function entries(self) {
  let len = array.length(self:buckets);
  let i = 0;

  return function next() {
    if (i >= len) {
      return null;
    }
    let bucket = null;
    while (i < len) {
      let bucket = self:buckets[i];
      i = i + 1;
      if (bucket) {
        return [bucket:key, bucket:value];
      }
    }
    return null;
  };
}

doc:add("function", "entries(map)", "Get an iterator over the key-value pairs in `map`.");

export let iter = entries;

doc:add("function", "iter(map)", "Get an iterator over the key-value pairs in `map`.");

export function size(self) {
  let n = 0;
  iter.foreach(entries(self), function () { n = n + 1; });
  return n;
}

doc:add("function", "size(map)", "Count the number of values in `map`.");

export function keys(self) {
  return iter.map(entries(self), function ([k]) { return k; });
}

doc:add("function", "keys(map)", "Get an iterator over the keys in `map`.");

export function values(self) {
  return iter.map(entries(self), function ([_, v]) { return v; });
}

doc:add("function", "values(map)", "Get an iterator over the values in `map`.");

export function make_with_hash_function(hash, init_fn) {
  let map = new();
  set_hash_function(map, hash);

  init_fn(function(k, v) {
    set(map, k, v);
  });

  return map;
}

doc:add(
  "function",
  "make_with_hash_function(hash, init)",
  "Make a new hashmap with `hash` as its hash functions, and call `init` to
initialize the map.

The `init` function receives a function that can be called with a key and value
to set them on the new map.",
);

export function make(init_fn) {
  return make_with_hash_function(default_hash, init_fn);
}

doc:add(
  "function",
  "make(init)",
  "Call `make_with_hash_function` with the default hash function and `init`.",
);

export function from_entries_with_hash_function(hash, entries) {
  let map = new();
  set_hash_function(map, hash);
  extend(map, entries);
  return map;
}

doc:add(
  "function",
  "from_entries_with_hash_function(hash, entries)",
  "Create a new hashmap with `hash` as its hash function, and populate it from
the iterator of key-value pairs `entries`.",
);

export function from_entries(entries) {
  return from_entries_with_hash_function(default_hash, entries);
}

doc:add(
  "function",
  "from_entries(entries)",
  "Call `from_entries_with_hash_function` with the default hash function and `entries`.",
);

export function extend(map, entries) {
  iter.foreach(entries, function([k, v]) {
    set(map, k, v);
  });
}

doc:add(
  "function",
  "extend(map, entries)",
  "Add each key-value pair in the `entries` iterator to `map`.",
);
