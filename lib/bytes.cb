import _bytes;
import arraylist;
import docs;
import iter;
import trait;

let doc = docs::module("bytes", "A compact byte array type.");

export struct Error { message }

export let new = _bytes::new;
export let copy = _bytes::copy;
export let get = _bytes::get;
export let set = _bytes::set;
export let length = _bytes::length;

doc.add("function", "new(size)", "Create a new byte array of size `size`.");
doc.add("function", "copy(from, to, n)", "Copy `n` bytes from `from` to `to`.");
doc.add("function", "get(bytes, i)", "Get the `i`th element from `bytes`.");
doc.add("function", "set(bytes, i, val)", "Set the `i`th value in `bytes` to `val`.");
doc.add("function", "length(bytes)", "Get the length of `bytes`.");

export function slice(bytes, start=0, end=-1) {
    if (end == -1) {
        end = length(bytes);
    }

    if (end < start) {
        throw Error { message = "slice end must be greater or equal to start" };
    }

    let len = end - start;
    let new_bytes = new(len);
    for (let i = 0; i < len; i += 1) {
        set(new_bytes, i, get(bytes, i + start));
    }
    return new_bytes;
}

export function concat(a, b) {
    let a_len = length(a),
        b_len = length(b);
    let result = new(a_len + b_len);
    let i = 0;
    for (; i < a_len; i += 1) {
        set(result, i, get(a, i));
    }
    for (; i < b_len; i += 1) {
        set(result, i, get(b, i - a_len));
    }
    return result;
}

struct BytesCollector {}
export let collector = BytesCollector {};

trait::impl(iter::Collector, BytesCollector, struct {
    function init(self) {
        return arraylist::new();
    }

    function reduce(self, list, value) {
        arraylist::push(list, value);
        return list;
    }

    function finalize(self, list) {
        let len = arraylist::length(list);
        let bytes = new(len);
        for (let i = 0; i < len; i += 1) {
            set(bytes, i, arraylist::get(list, i));
        }
        return bytes;
    }
});

doc.add("object", "collector", "A collector for converting an iterator into byte array.");

trait::impl(iter::Iterable, trait::primitive("bytes"), struct {
    function iter(self) {
        return BytesIterator { bytes = self, len = length(self), i = 0 };
    }
});

struct BytesIterator { bytes, len, i }

trait::impl(iter::Iterable, BytesIterator, struct {
    function iter(self) {
        return self;
    }
});

trait::impl(iter::Iterator, BytesIterator, struct {
    function next(self) {
        if (self.i >= self.len) {
            return iter::STOP;
        }
        let val = get(self.bytes, self.i);
        self.i += 1;
        return val;
    }
});