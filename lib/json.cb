import array;
import arraylist;
import char;
import docs;
import fn;
import hashmap;
import integer;
import iter;
import string;
import structs;

let doc = docs::module("json", "A partial implementation of a JSON parser.");

let T_LEFT_BRACE = 0;
let T_RIGHT_BRACE = 1;
let T_LEFT_BRACKET = 2;
let T_RIGHT_BRACKET = 3;
let T_COLON = 4;
let T_COMMA = 5;
let T_STRING = 6;
let T_NUMBER = 7;
let T_TRUE = 8;
let T_FALSE = 9;
let T_NULL = 10;

export struct UnexpectedTokenError { message }
export struct InvalidJsonError { message }
export struct UnserializeableError { message }

doc.add(
  "struct",
  "UnexpectedTokenError",
  "Error raised when an unexpected token is encountered.",
);
doc.add(
  "struct",
  "InvalidJsonError",
  "Error raised when the input string is not able to be parsed.",
);
doc.add(
    "struct",
    "UnserializeableError",
    "Error raised when trying to serialize something that can't be represented in JSON.",
);

struct Token {
  type, value
}

function tokenize(input) {
  let chars = string::chars(input);
  let tokens = arraylist::new();
  let len = array::length(chars);
  let i = 0;

  while (i < len) {
    let char = chars[i];
    let token;

    if (char == ' '
        || char == '\n'
        || char == '\r'
        || char == '\t') {
      i += 1;
      continue;
    } else if (char == '{') {
      token = Token{type=T_LEFT_BRACE, value="{"};
      i += 1;
    } else if (char == '}') {
      token = Token{type=T_RIGHT_BRACE, value="}"};
      i += 1;
    } else if (char == '[') {
      token = Token{type=T_LEFT_BRACKET, value="["};
      i += 1;
    } else if (char == ']') {
      token = Token{type=T_RIGHT_BRACKET, value="]"};
      i += 1;
    } else if (char == ':') {
      token = Token{type=T_COLON, value=":"};
      i += 1;
    } else if (char == ',') {
      token = Token{type=T_COMMA, value=","};
      i += 1;
    } else if (char == 't'
        && chars[i + 1] == 'r'
        && chars[i + 2] == 'u'
        && chars[i + 3] == 'e') {
      token = Token{type=T_TRUE, value="true"};
      i += 4;
    } else if (char == 'f'
        && chars[i + 1] == 'a'
        && chars[i + 2] == 'l'
        && chars[i + 3] == 's'
        && chars[i + 4] == 'e') {
      token = Token{type=T_FALSE, value="false"};
      i += 5;
    } else if (char == 'n'
        && chars[i + 1] == 'u'
        && chars[i + 2] == 'l'
        && chars[i + 3] == 'l') {
      token = Token{type=T_NULL, value="null"};
      i += 4;
    } else if (char == '"') {
      let str = "";
      i += 1;

      while (i < len && chars[i] != '"') {
        str = string_concat(str, tostring(chars[i]));
        i += 1;
      }

      i += 1;
      token = Token{type=T_STRING, value=str};
    } else if (char::is_digit(char) || char == '-') {
      let is_float = false;
      let c;
      let str;
      if (char == '-') {
        i += 1;
        c = chars[i];
        str = tostring(char);
      } else {
        c = char;
        str = "";
      }
      if (c == '0') {
        is_float = true;
        i += 1;
        str = string_concat(str, "0");
      } else if (char::is_digit(c) && c != '0') {
        str = string_concat(str, tostring(c));
        i += 1;
      } else {
        throw UnexpectedTokenError { message = c };
      }

      if (chars[i] == '.') {
        is_float = true;
        i += 1;
        str = string_concat(str, ".");
      } else if (is_float) {
        throw UnexpectedTokenError { message = chars[i] };
      }

      while (i < len && char::is_digit(chars[i])) {
        str = string_concat(str, tostring(chars[i]));
        i += 1;
      }

      token = Token{type=T_NUMBER, value=str};
    } else {
      throw UnexpectedTokenError { message = char };
    }

    arraylist::push(tokens, token);
  }

  return arraylist::to_array(tokens);
}

function parse_value(tokens) {
  let token = iter::next(tokens);
  let type = token.type;
  let value = token.value;

  let ret;
  if (type == T_NUMBER) {
    ret = string::parse_float(value, 10);
  } else if (type == T_STRING) {
    ret = value;
  } else if (type == T_TRUE) {
    ret = true;
  } else if (type == T_FALSE) {
    ret = false;
  } else if (type == T_NULL) {
    ret = null;
  } else if (type == T_LEFT_BRACE) {
    let values = hashmap::new();
    let is_first = true;

    while (tokens.peek().type != T_RIGHT_BRACE) {
      if (!is_first) {
        let comma = iter::next(tokens);
        if (comma.type != T_COMMA) {
          throw UnexpectedTokenError {
              message = string_concat("Expected comma, found '", comma.value, "'"),
          };
        }
      } else {
        is_first = false;
      }

      let key = parse_value(tokens);

      if (typeof(key) != "string") {
        throw UnexpectedTokenError {
            message = string_concat("Expected string, found ", key),
        };
      }

      let colon = iter::next(tokens);
      if (colon.type != T_COLON) {
        throw UnexpectedTokenError {
            message = string_concat("Expected colon, found '", comma.value, "'"),
        };
      }

      let map_value = parse_value(tokens);
      hashmap::set(values, key, map_value);
    }

    iter::next(tokens);  # consume right brace

    ret = values;
  } else if (type == T_LEFT_BRACKET) {
    let values = arraylist::new();

    let is_first = true;
    while (tokens.peek().type != T_RIGHT_BRACKET) {
      if (!is_first) {
        let comma = iter::next(tokens);
        if (comma.type != T_COMMA) {
          throw UnexpectedTokenError {
              message = string_concat("Expected comma, found '", comma.value, "'"),
          };
        }
      } else {
        is_first = false;
      }

      let value = parse_value(tokens);
      arraylist::push(values, value);
    }

    iter::next(tokens); # consume right bracket

    ret = arraylist::to_array(values);
  } else {
    throw UnexpectedTokenError {
        message = string_concat("Unexpected token ", tostring(value)),
    };
  }

  return ret;
}

export function parse(input) {
  let tokens = tokenize(input);
  let data = parse_value(iter::peekable(tokens));

  if (i != len) {
    throw InvalidJsonError {
        message = string_concat("Expected EOF, found ", tostring(tokens[i - 1].value)),
    };
  }

  return data;
}

doc.add("function", "parse(input)", "Parse the string `input` as JSON.");

function serialize_string(str) {
    let chars = string::chars(str),
        parts = arraylist::new();
    let charslen = array::length(chars);
    arraylist::push(parts, "\"");
    for (let i = 0; i < charslen; i += 1) {
        let c = chars[i];
        let code = ord(c);
        if (c == '"') {
            arraylist::push(parts, "\\\"");
        } else if (c == '\\') {
            arraylist::push(parts, "\\\\");
        } else if (c == '\n') {
            arraylist::push(parts, "\\n");
        } else if (c == '\r') {
            arraylist::push(parts, "\\r");
        } else if (c == '\t') {
            arraylist::push(parts, "\\t");
        } else if (code > 20 && code < 0x10FFFF) {
            arraylist::push(parts, tostring(c));
        } else {
            arraylist::push(
                parts,
                string::concat("\\u", string::padleft(integer::hex(code), '0', 4)),
            );
        }
    }
    arraylist::push(parts, "\"");
    return fn::apply(string::concat, arraylist::to_array(parts));
}

function serialize_array(arr) {
    let arrlen = array::length(arr);
    let partslen = 2;
    if (arrlen != 0) {
        partslen += array::length(arr) * 2 - 1;
    }
    let parts = array::new(partslen);
    parts[0] = "[";
    for (let i = 0; i < arrlen; i += 1) {
        parts[2 * i + 1] = serialize(arr[i]);
        parts[2 * i + 2] = ",";
    }
    parts[partslen - 1] = "]";
    return fn::apply(string::concat, parts);
}

function serialize_object_from_entries(entries, sizehint=8) {
    let parts = arraylist::with_capacity(
        sizehint * 3  # key, colon, value
        + sizehint - 1  # comma between each element
        + 2  # braces
    );
    arraylist::push(parts, "{");
    iter::foreach(iter::enumerate(entries), function ([i, kv]) {
        let [key, value] = kv;
        if (i != 0) {
            arraylist::push(parts, ",");
        }
        arraylist::push(parts, serialize_string(tostring(key)));
        arraylist::push(parts, ":");
        arraylist::push(parts, serialize(value));
    });
    arraylist::push(parts, "}");
    return fn::apply(string::concat, arraylist::to_array(parts));
}

function serialize_hashmap(map) {
    return serialize_object_from_entries(hashmap::entries(map),
            hashmap::size(map));
}

function serialize_struct(obj) {
    # Some special cases:
    let spec = structs::spec(obj);
    if (spec == arraylist::ArrayList) {
        return serialize_array(arraylist::to_array(obj));
    } else if (spec == hashmap::HashMap) {
        return serialize_hashmap(obj);
    }

    let fields = structs::fields(spec);
    let nfields = array::length(fields);

    let entries = array::new(nfields);
    for (let i = 0; i < nfields; i += 1) {
        let fieldname = fields[i];
        let value = structs::get(obj, fieldname);
        entries[i] = [fieldname, value];
    }

    return serialize_object_from_entries(entries, nfields);
}

export function serialize(obj) {
    let ty = typeof(obj);
    if (ty == "null") {
        return "null";
    } else if (ty == "integer") {
        return tostring(obj);
    } else if (ty == "double") {
        return tostring(obj);
    } else if (ty == "boolean") {
        if (obj) {
            return "true";
        } else {
            return "false";
        }
    } else if (ty == "char") {
        return serialize_string(tostring(obj));
    } else if (ty == "string") {
        return serialize_string(obj);
    } else if (ty == "array") {
        return serialize_array(obj);
    } else if (ty == "struct") {
        return serialize_struct(obj);
    } else {
        throw UnserializeableError {
            message = string::concat(ty, " object is not JSON serializeable"),
        };
    }
}

doc.add("function", "serialize(obj)", "Serialize an object to JSON.");