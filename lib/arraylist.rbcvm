import "array";

struct ArrayList {
  length,
  array,
}

let INITIAL_SIZE = 16;

export function from_array(len, array) {
  return ArrayList{length=len, array=array};
}

export function with_capacity(cap) {
  return from_array(0, array.new(cap));
}

export function new() {
  return with_capacity(INITIAL_SIZE);
}

export function length(self) {
  return self:length;
}

export function capacity(self) {
  return array.length(self:array);
}

export function get(self, idx) {
  return self:array[idx];
}

export function set(self, idx, value) {
  self:array[idx] = value;
}

export function delete(self, index) {
  let len = self:length;

  for (let i = index + 1; i < len; i = i + 1) {
    set(self, i - 1, get(self, i));
  }
}

export function to_array(self) {
  let new_array = array.new(self:length);

  foreach(self, function(val, i) {
    new_array[i] = val;
  });

  return new_array;
}

export function push(self, value) {
  let next_idx = self:length;
  let array = self:array;
  let len = array.length(array);

  if (next_idx >= len) {
    let new_array = array.new(2 * len);
    for (let i = 0; i < next_idx; i = i + 1) {
      new_array[i] = array[i];
    }
    self:array = array = new_array;
  }

  array[next_idx] = value;
  self:length = next_idx + 1;
}

export function pop(self) {
  if (self:length <= 0) {
    return null;
  }

  let i = self:length = self:length - 1;
  return self:array[i];
}

export function foreach(self, func) {
  let len = self:length;
  let array = self:array;

  for (let i = 0; i < len; i = i + 1) {
    func(array[i], i, self);
  }
}

export function find_index(self, func) {
  let len = self:length;
  let array = self:array;

  for (let i = 0; i < len; i = i + 1) {
    if (func(array[i], i, self)) {
      return i;
    }
  }

  return -1;
}

export function map(self, func) {
  let len = self:length;
  let cap = capacity(self);
  let new_array = array.new(cap);

  foreach(self, function(val, i) {
    new_array[i] = val;
  });

  return from_array(len, new_array);
}

export function find(self, func) {
  let index = find_index(self, func);

  if (index < 0) {
    return null;
  }

  return get(self, index);
}
