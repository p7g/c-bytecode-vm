import _array;
import docs;

let doc = docs.module("arraylist", "A growable array.");

struct ArrayList {
  length,
  array,
}

let INITIAL_SIZE = 16;

export function from_array(len, array) {
  return ArrayList{length=len, array=array};
}

doc:add(
  "function",
  "from_array(len, array)",
  "Create a new arraylist from `array`. The `len` argument should be the length
of `array`.",
);

export function iter(self) {
  let i = 0;

  return function arraylist_iterator() {
    if (i >= self:length) {
      return null;
    }
    let val = get(self, i);
    i = i + 1;
    return val;
  };
}

doc:add("function", "iter(list)", "Create an iterator over arraylist `list`.");

export function with_capacity(cap) {
  return from_array(0, _array.new(cap));
}

doc:add(
  "function",
  "with_capacity(cap)",
  "Create an empty arraylist with the given initial capacity.",
);

export function new() {
  return with_capacity(INITIAL_SIZE);
}

doc:add(
  "function",
  "new()",
  "Create an empty arraylist with default initial capacity.",
);

export function length(self) {
  return self:length;
}

doc:add("function", "length(list)", "Get the number of items in `list`.");

export function capacity(self) {
  return _array.length(self:array);
}

doc:add("function", "capacity(list)", "Get the maximum number of items `list` can hold.");

export function get(self, idx) {
  return self:array[idx];
}

doc:add("function", "get(list, idx)", "Get the element of `list` at index `idx`.");

export function set(self, idx, value) {
  self:array[idx] = value;
}

doc:add("function", "set(list, idx, value)", "Set the element of `list` at index `idx` to `value`.");

export function delete(self, index) {
  let len = self:length;

  for (let i = index + 1; i < len; i = i + 1) {
    set(self, i - 1, get(self, i));
  }

  self:length = len - 1;
}

doc:add(
  "function",
  "delete(list, idx)",
  "Remove the element at index `idx` from `list`. This involves shuffling all
elements after `idx` leftward, so it's not very efficient.",
);

export function to_array(self) {
  let new_array = _array.new(self:length);

  foreach(self, function(val, i) {
    new_array[i] = val;
  });

  return new_array;
}

doc:add("function", "to_array(list)", "Copy the elements of `list` into a fixed-length array.");

export function push(self, value) {
  let next_idx = self:length;
  let array = self:array;
  let len = _array.length(array);

  if (next_idx >= len) {
    let new_array = _array.new(2 * len);
    for (let i = 0; i < next_idx; i = i + 1) {
      new_array[i] = array[i];
    }
    self:array = array = new_array;
  }

  array[next_idx] = value;
  self:length = next_idx + 1;
  return self;  # Return `self` to enable use as a reducer function.
}

doc:add(
  "function",
  "push(list, value)",
  "Push `value` on to the end of `list`, growing it if necessary.",
);

# don't use exported struct from `iter` to avoid circular import
export let collector = struct {
  init = new,
  reduce = push,
  finalize = function (list) { return list; },
};

doc:add("object", "collector", "A collector for converting an iterator into an arraylist.");

export function pop(self) {
  if (self:length <= 0) {
    return null;
  }

  let i = self:length = self:length - 1;
  return self:array[i];
}

doc:add(
  "function",
  "pop(list)",
  "Remove and return the last element of `list`.",
);

export function foreach(self, func) {
  let len = self:length;
  let array = self:array;

  for (let i = 0; i < len; i = i + 1) {
    func(array[i], i, self);
  }
}

doc:add(
  "function",
  "foreach(list, func)",
  "Call `func` for each element of `list`.",
);

export function find_index(self, func) {
  let len = self:length;
  let array = self:array;

  for (let i = 0; i < len; i = i + 1) {
    if (func(array[i], i, self)) {
      return i;
    }
  }

  return -1;
}

doc:add(
  "function",
  "find_index(list, func)",
  "Get the index of the first element that satisfies the predicate `func`, or -1
if none exists.",
);

export function map(self, func) {
  let len = self:length;
  let cap = capacity(self);
  let new_array = _array.new(cap);

  foreach(self, function(val, i) {
    new_array[i] = func(val);
  });

  return from_array(len, new_array);
}

doc:add(
  "function",
  "map(list, func)",
  "Create a new arraylist where each element is the result of calling `func` on
the corresponding element of `list`.",
);

export function find(self, func) {
  let index = find_index(self, func);

  if (index < 0) {
    return null;
  }

  return get(self, index);
}

doc:add(
  "function",
  "find(list, func)",
  "Get the first element that satisfies the predicate `func`, or null if none exists.",
);

export function some(self, f) {
    return -1 != find_index(self, f);
}

doc:add(
  "function",
  "some(list, func)",
  "Check if any element in `list` satisfies the predicate `func`.",
);

export function contains(self, a) {
    return some(self, function (b) {
        return a == b;
    });
}

doc:add(
  "function",
  "contains(list, thing)",
  "Check if any element in `list` is equal to `thing`.",
);

export function to_iter(self) {
  let pos = 0;

  return function next() {
    if (pos >= self:length) {
      return null;
    }

    let val = get(self, pos);
    pos = pos + 1;
    return val;
  };
}

doc:add(
  "function",
  "to_iter(list)",
  "Create an iterator over the arraylist.",
);