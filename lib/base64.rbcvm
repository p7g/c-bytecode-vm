import array;
import bytes;
import char;
import docs;
import inet;
import iter;
import math;
import string;
import test;

let doc = docs::module("base64", "Base64 encoding and decoding functions.");
let chars = string::chars("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
let decode_table = array::new(256);

export struct Error {
    message,
}

export function encode_size(payload) {
    let size = math::ceil(bytes::length(payload) * 4 / 3.0);
    return size - size % 4 + 4;
}

doc.add(
    "function",
    "encode_size(payload)",
    "Calculate the size of the base64 encoding of the byte array `payload`.",
);

export function decode_size(payload) {
    let len = string::length(payload);
    let npadding = 0;
    # FIXME: not ideal
    iter::foreach(string::iter(payload), function (c) {
        if (c == '=') {
            npadding = npadding + 1;
        }
    });

    let size = 3 * math::floor((len - npadding) / 4);
    if (npadding == 1) {
        return size + 2;
    } else if (npadding == 2) {
        return size + 1;
    }
    return size;
}

doc.add(
    "function",
    "decode_size(payload)",
    "Calculate the number of bytes that will result from decoding `payload`.",
);

let inited_decode_table = false;

function init_decode_table() {
    if (inited_decode_table) {
        return;
    }
    for (let i = 0; i < 256; i = i + 1) {
        let ch = chr(i);
        let code = -1;
        if (char::is_alpha(ch)) {
            if (char::is_uppercase(ch)) {
                code = i - 0x41;
            } else {
                code = i - 0x47;
            }
        } else if (char::is_digit(ch)) {
            code = i + 0x04;
        } else if (ch == '+' || ch == '-') {
            code = 0x3E;
        } else if (ch == '/' || ch == '_') {
            code = 0x3F;
        }
        decode_table[i] = code;
    }
    inited_decode_table = true;
}

function is_whitespace_or_padding(c) {
    return char::is_whitespace(c) || c == '=';
}

export function decode(str) {
    init_decode_table();

    let out = bytes::new(decode_size(str));
    str = string::bytes(string::strip(str, is_whitespace_or_padding));

    let size = bytes::length(str);
    let ends = size - 4;
    let i = 0, j = 0;

    let ord_ = ord;
    let shl = math::shl;
    let shr = math::shr;
    let decode = decode_table;
    let bytes_get = bytes::get;
    let bytes_set = bytes::set;

    while (i <= ends) {
        let a = decode[bytes_get(str, i)];
        let b = decode[bytes_get(str, i + 1)];
        let c = decode[bytes_get(str, i + 2)];
        let d = decode[bytes_get(str, i + 3)];

        if (a < 0 || b < 0 || c < 0 || d < 0) {
            throw Error { message = "Invalid char in base64" };
        }

        bytes_set(out, j, (shl(a, 2) | shr(b, 4)) & 0xff);
        bytes_set(out, j + 1, (shl(b, 4) | shr(c, 2)) & 0xff);
        bytes_set(out, j + 2, (shl(c, 6) | d) & 0xff);

        j = j + 3;
        i = i + 4;
    }

    let mod = (ends - i + 4) % 4;
    if (mod == 2) {
        let a = decode[bytes_get(str, i)];
        let b = decode[bytes_get(str, i + 1)];
        if (a < 0 || b < 0) {
            throw Error { message = "Invalid char in base64" };
        }
        bytes_set(out, j, (shl(a, 2) | shr(b, 4)) & 0xff);
    } else if (mod == 3) {
        let a = decode[bytes_get(str, i)];
        let b = decode[bytes_get(str, i + 1)];
        let c = decode[bytes_get(str, i + 2)];
        if (a < 0 || b < 0 || c < 0) {
            throw Error { message = "Invalid char in base64" };
        }
        bytes_set(out, j, (shl(a, 2) | shr(b, 4)) & 0xff);
        bytes_set(out, j + 1, (shl(b, 4) | shr(c, 2)) & 0xff);
    }

    return out;
}

doc.add("function", "decode(data)", "Decode a base64 string into an array of ints.");

export function encode(data, out=null) {
    if (out == null) {
        out = bytes::new(encode_size(data));
    } else {
        let encsize = encode_size(data);
        test::assert(bytes::length(out) >= encsize);
    }
    let size = bytes::length(data);
    let ends = size - (size % 3);
    let i = 0, j = 0;

    let shr = math::shr;
    let htonl = inet::htonl;
    let bytestol = inet::bytestol;
    let buf_set = bytes::set;
    let cs = chars;
    let ord_ = ord;
    let bytes_get = bytes::get;

    while (i != ends) {
        let n = htonl(bytestol([
            bytes_get(data, i),
            bytes_get(data, i + 1),
            bytes_get(data, i + 2),
            bytes_get(data, i + 3),
        ]));
        buf_set(out, j, ord_(cs[shr(n, 26) & 63]));
        buf_set(out, j + 1, ord_(cs[shr(n, 20) & 63]));
        buf_set(out, j + 2, ord_(cs[shr(n, 14) & 63]));
        buf_set(out, j + 3, ord_(cs[shr(n, 8) & 63]));
        j = j + 4;
        i = i + 3;
    }

    let pd = size % 3;
    if (pd == 1) {
        let n = math::shl(bytes_get(data, i), 16);
        buf_set(out, j, ord_(cs[shr(n, 18) & 63]));
        buf_set(out, j + 1, ord_(cs[shr(n, 12) & 63]));
        buf_set(out, j + 2, ord_('='));
        buf_set(out, j + 3, ord_('='));
    } else if (pd == 2) {
        let n = math::shl(bytes_get(data, i), 16)
            | math::shl(bytes_get(data, i + 1), 8);
        buf_set(out, j, ord_(cs[shr(n, 18) & 63]));
        buf_set(out, j + 1, ord_(cs[shr(n, 12) & 63]));
        buf_set(out, j + 2, ord_(cs[shr(n, 6) & 63]));
        buf_set(out, j + 3, ord_('='));
    }

    return string::from_bytes(out);
}

doc.add(
    "function",
    "encode(payload, out=null)",
    string::concat(
        "Encode an array of bytes into a base64 string. A single `out` buffer",
        " can be reused between calls to `encode` for better performance.",
    ),
);