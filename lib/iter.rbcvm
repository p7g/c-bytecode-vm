import array;
import docs;

let doc = docs.module("iter", "Lazy iterators.");

function ensure_iterable(it) {
  if (type_of(it) == "array") {
    return array.iter(it);
  }
  return it;
}

export struct collector { init, reduce, finalize }

doc:add(
  "struct",
  "collector",
  "An struct defining the required functions to convert an iterator into an arbitrary collection.",
);

export function count(n) {
  let i = n;
  return function() {
    let val = i;
    i = i + 1;
    return val;
  };
}

doc:add("function", "count(n)", "Create an iterator that counts up from `n` indefinitely.");

export function range(to) {
  let i = 0;
  return function() {
    if (i >= to) {
      return null;
    }
    let val = i;
    i = i + 1;
    return val;
  };
}

doc:add("function", "range(to)", "Create an iterator that counts from 0 to `to`.");

export function enumerate(_it) {
  let it = ensure_iterable(_it);
  let i = 0;
  return function() {
    let val = it();
    if (val == null) {
      return null;
    }

    let retval = [i, val];
    i = i + 1;
    return retval;
  };
}

doc:add("function", "enumerate(it)", "Create an iterator that yields pairs of index and value from `it`.");

export function foreach(_it, fn) {
  let it = ensure_iterable(_it);
  for (let val; (val = it()) != null;) {
    fn(val);
  }
}

doc:add(
  "function",
  "foreach(it, fn)",
  "Call the function `fn` for every element of `it`. This evaluates the iterator.",
);

export function collect(it, collector=array.collector) {
  return collector:finalize(
    fold(ensure_iterable(it), collector:init(), collector:reduce),
  );
}

doc:add(
  "function",
  "collect(it)",
  "Evaluate an iterator, returning an array of the values it yields.",
);

export function map(_it, fn) {
  let it = ensure_iterable(_it);
  return function() {
    let val = it();
    if (val == null) {
      return null;
    }
    return fn(val);
  };
}

doc:add(
  "function",
  "map(it, fn)",
  "Return a new iterator that yields the values of `it` applied to `fn`.",
);

export function take(_it, n) {
  let it = ensure_iterable(_it);
  let i = 0;
  return function() {
    if (i >= n) {
      return null;
    }
    i = i + 1;
    return it();
  };
}

doc:add(
  "function",
  "take(it, n)",
  "Create an iterator that evaluates the first `n` elements of `it`.

Note that evaluating this iterator partially evalutaes `it`.",
);

export function drop(_it, n) {
  let it = ensure_iterable(_it);
  for (let i = 0; i < n; i = i + 1) {
    it();
  }

  return it;
}

doc:add(
  "function",
  "drop(it, n)",
  "Create an iterator that ignores the first `n` elements of `it`.

Note that calling this function immediately evaluates and drops the first `n`
values of `it`.",
);

export function take_while(_it, pred) {
  let it = ensure_iterable(_it);
  let done = false;

  return function() {
    if (done) {
      return null;
    }

    let val = it();
    if (!pred(val)) {
      done = true;
      return null;
    }

    return val;
  };
}

doc:add(
  "function",
  "take_while(it, pred)",
  "Create an iterator that yields the values of `it` until `pred` returns false.",
);

export function zip(_a, _b) {
  let a = ensure_iterable(_a);
  let b = ensure_iterable(_b);
  return function() {
    let val_a = a();
    let val_b = b();

    if (val_a == null && val_b == null) {
      return null;
    }
    return [val_a, val_b];
  };
}

doc:add("function", "zip(a, b)", "Create an iterator that joins `a` and `b` pair-wise.");

export function flat(_it) {
  let it = ensure_iterable(_it);
  let current = null;

  return function next() {
    if (current) {
      let val = current();
      if (val == null) {
        current = null;
        return next();
      }
      return val;
    }
    current = it();
    if (current == null) {
      return null;
    }
    return next();
  };
}

doc:add("function", "flat(it)", "Flattens an iterator of iterators.");

export function fold1(it, reducer) {
  it = ensure_iterable(it);
  return fold(it, it(), reducer);
}

doc:add(
  "function",
  "fold1(it, reducer)",
  "Reduce the iterator, using the first value as the initial value of the accumulator.",
);

export function fold(it, init, reducer) {
  foreach(it, function (item) {
    init = reducer(init, item);
  });
  return init;
}

doc:add(
  "function",
  "fold(it, init, reducer)",
  "Reduce the iterator, using `init` as the initial value of the accumulator.",
);

export function max(it) {
  return fold(it, null, function (greatest, item) {
    if (greatest == null || item > greatest) {
      return item;
    }
    return greatest;
  });
}

doc:add(
  "function",
  "max(it)",
  "Find the largest item in the iterator (using `>`).",
);

export function min(it) {
  return fold(it, null, function (least, item) {
    if (least == null || item < least) {
      return item;
    }
    return least;
  });
}

doc:add(
  "function",
  "min(it)",
  "Find the smallest item in the iterator (using `<`).",
);
