import _iter;
import docs;
import list;
import math;
import op;

let doc = docs::module("iter", "Lazy iterators.");

export let STOP = _iter::STOP;
doc.add("object", "STOP", "A sentinel value indicating that an iterator has been exhausted.");

function ensure_iterable(it) {
  if (typeof(it) == "array") {
    return _iter::array_iter(it);
  }
  return it;
}

export let collector = _iter::collector;

doc.add(
  "struct",
  "collector",
  "An struct defining the required functions to convert an iterator into an arbitrary collection.",
);

export function count(n) {
  let i = n;
  return function() {
    let val = i;
    i = i + 1;
    return val;
  };
}

doc.add("function", "count(n)", "Create an iterator that counts up from `n` indefinitely.");

export function range(to) {
  let i = 0;
  return function() {
    if (i >= to) {
      return STOP;
    }
    let val = i;
    i = i + 1;
    return val;
  };
}

doc.add("function", "range(to)", "Create an iterator that counts from 0 to `to`.");

export function enumerate(it, start=0) {
  let i = start;
  return map(it, function enumerate_map(item) {
    let result = [i, item];
    i = i + 1;
    return result;
  });
}

doc.add("function", "enumerate(it)", "Create an iterator that yields pairs of index and value from `it`.");

export function foreach(_it, fn) {
  let it = ensure_iterable(_it);
  for (let val; (val = it()) != STOP;) {
    if (fn(val) == STOP) {
        break;
    }
  }
}

doc.add(
  "function",
  "foreach(it, fn)",
  "Call the function `fn` for every element of `it`. This evaluates the iterator.",
);

export function collect(it, collector=_iter::array_collector) {
  return collector.finalize(
    fold(collector.reduce, ensure_iterable(it), collector.init()),
  );
}

doc.add(
  "function",
  "collect(it)",
  "Evaluate an iterator, returning an array of the values it yields.",
);

export function map(it, fn) {
  it = ensure_iterable(it);
  return function() {
    let val = it();
    if (val == STOP) {
      return STOP;
    }
    return fn(val);
  };
}

doc.add(
  "function",
  "map(it, fn)",
  "Return a new iterator that yields the values of `it` applied to `fn`.",
);

export function take(_it, n) {
  let it = ensure_iterable(_it);
  let i = 0;
  return function() {
    if (i >= n) {
      return STOP;
    }
    i = i + 1;
    return it();
  };
}

doc.add(
  "function",
  "take(it, n)",
  "Create an iterator that evaluates the first `n` elements of `it`.

Note that evaluating this iterator partially evalutaes `it`.",
);

export function drop(_it, n) {
  let it = ensure_iterable(_it);
  for (let i = 0; i < n; i = i + 1) {
    it();
  }

  return it;
}

doc.add(
  "function",
  "drop(it, n)",
  "Create an iterator that ignores the first `n` elements of `it`.

Note that calling this function immediately evaluates and drops the first `n`
values of `it`.",
);

export function take_while(_it, pred) {
  let it = ensure_iterable(_it);
  let done = false;

  return function() {
    if (done) {
      return STOP;
    }

    let val = it();
    if (val == STOP || !pred(val)) {
      done = true;
      return STOP;
    }

    return val;
  };
}

doc.add(
  "function",
  "take_while(it, pred)",
  "Create an iterator that yields the values of `it` until `pred` returns false.",
);

export function zip(_a, _b) {
  let a = ensure_iterable(_a);
  let b = ensure_iterable(_b);
  return function() {
    let val_a = a();
    let val_b = b();

    if (val_a == STOP && val_b == STOP) {
      return STOP;
    } else if (val_a == STOP) {
      return [null, val_b];
    } else if (val_b == STOP) {
      return [val_a, null];
    } else {
      return [val_a, val_b];
    }
  };
}

doc.add("function", "zip(a, b)", "Create an iterator that joins `a` and `b` pair-wise.");

export function flat(_it) {
  let it = ensure_iterable(_it);
  let current = null;

  return function next() {
    if (current) {
      let val = current();
      if (val == STOP) {
        current = null;
        return next();
      }
      return val;
    }
    current = it();
    if (current == STOP) {
      return STOP;
    }
    return next();
  };
}

doc.add("function", "flat(it)", "Flattens an iterator of iterators.");

export function fold1(reducer, it) {
  it = ensure_iterable(it);
  return fold(reducer, it, it());
}

doc.add(
  "function",
  "fold1(reducer, it)",
  "Reduce the iterator, using the first value as the initial value of the accumulator.",
);

export function fold(reducer, it, init) {
  foreach(it, function (item) {
    init = reducer(init, item);
  });
  return init;
}

doc.add(
  "function",
  "fold(reducer, it, init)",
  "Reduce the iterator, using `init` as the initial value of the accumulator.",
);

export function max(it) {
  return fold1(math::max, it);
}

doc.add(
  "function",
  "max(it)",
  "Find the largest item in the iterator (using `>`).",
);

export function min(it) {
  return fold(math::min, it);
}

doc.add(
  "function",
  "min(it)",
  "Find the smallest item in the iterator (using `<`).",
);

export function repeat(val, times) {
  return function repeat_iterator() {
    if (times == 0) {
      return STOP;
    }
    times = times - 1;
    return val;
  };
}

doc.add(
  "function",
  "repeat(val, n)",
  "Create an iterator that repeats `val` `n` times.",
);

export function intersperse(_it, sep) {
  let it = ensure_iterable(_it);
  let yield_sep = false;
  return function intersperse_next() {
    if (yield_sep) {
      yield_sep = false;
      return sep;
    } else {
      let val = it();
      if (val == STOP) {
        return STOP;
      }
      yield_sep = true;
      return val;
    }
  };
}

doc.add(
  "function",
  "intersperse(it, val)",
  "Yield `val` in between each element of `it`.",
);

export function sum(_it) {
    return fold1(op::add, _it);
}

doc.add("function", "sum(it)", "Sum the elements of `it`.");

export struct Peekable {
    iter,
    peek,
}

export function peekable(it) {
    it = ensure_iterable(it);
    let peeked = list::new();

    function next() {
        if (list::length(peeked) > 0) {
            return list::unshift(peeked);
        }
        return it();
    }

    function peek(n = 1) {
        if (list::length(peeked) >= i) {
            return list::get(peeked, i);
        }

        let el;
        for (let i = 0; i < n; i = i + 1) {
            el = it();
            if (el == STOP) {
                break;
            }
            list::append(peeked, el);
        }

        return el;
    }

    return Peekable {
        iter = next,
        peek = peek,
    };
}

doc.add(
    "function",
    "peekable(it)",
    "",
);

export function slice(it, start, end=null) {
    it = ensure_iterable(it);
    let i = 0;
    return function slice_next() {
        while (i < start) {
            if (it() == STOP) {
                return STOP;
            }
            i = i + 1;
        }

        if (end != null && i >= end) {
            return STOP;
        }

        let value = it();
        if (value != STOP) {
            i = i + 1;
        }
        return value;
    };
}

doc.add(
    "function",
    "slice(it, start, end=...)",
    "",
);