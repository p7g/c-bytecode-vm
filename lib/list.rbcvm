import "array";
import "box";

struct Node {
  car, cdr
}

export function new() {
  return box.new(null);
}

export function length(self) {
  let current = box.get(self);
  let len = 0;

  while (current) {
    len = len + 1;
    current = current:cdr;
  }

  return len;
}

export function prepend(self, value) {
  let current = box.get(self);
  box.set(self, Node{car=value, cdr=current});
}

export function append(self, value) {
  let current = box.get(self);
  let prev = null;
  if (current == null) {
    box.set(self, Node{car=value, cdr=null});
    return;
  }

  while (current) {
    prev = current;
    current = current:cdr;
  }

  prev:cdr = [value, null];
}

export function foreach(self, func) {
  let current = box.get(self);

  for (let i = 0; current; i = i + 1) {
    func(current:car, i, self);
    current = current:cdr;
  }
}

export function find(self, func) {
  let current = box.get(self);

  for (let i = 0; current; i = i + 1) {
    if (func(current:car, i, self)) {
      return current:car;
    }
  }

  return null;
}

export function reverse(self) {
  let new_list = new();

  foreach(self, function(val) {
    prepend(new_list, val);
  });

  return new_list;
}

export function map(self, func) {
  let new_list = new();

  foreach(self, function(val, i) {
    prepend(new_list, func(val, i, self));
  });

  return reverse(new_list);
}

export function to_array(self) {
  let arr = array.new(length(self));

  foreach(self, function(val, i) {
    arr[i] = val;
  });

  return arr;
}
