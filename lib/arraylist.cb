import _array;
import _arraylist_impl;
import docs;
import iter;
import trait;

let doc = docs::module("arraylist", "A growable array.");

export let ArrayList = _arraylist_impl::ArrayList;

export let from_array = _arraylist_impl::from_array;

doc.add(
  "function",
  "from_array(len, array)",
  "Create a new arraylist from `array`. The `len` argument should be the length
of `array`.",
);

trait::impl(iter::Iterable, ArrayList, struct {
  function iter(self) {
    return ArrayListIterator { list = self, i = 0 };
  }
});

struct ArrayListIterator { list, i }

trait::impl(iter::Iterable, ArrayListIterator, struct {
  function iter(self) {
    return self;
  }
});

trait::impl(iter::Iterator, ArrayListIterator, struct {
  function next(self) {
    if (self.i >= self.list._length) {
      return iter::STOP;
    }
    let val = self.list.get(self.i);
    self.i += 1;
    return val;
  }
});

export let with_capacity = _arraylist_impl::with_capacity;

doc.add(
  "function",
  "with_capacity(cap)",
  "Create an empty arraylist with the given initial capacity.",
);

export let new = _arraylist_impl::new;

doc.add(
  "function",
  "new()",
  "Create an empty arraylist with default initial capacity.",
);

export let length = _arraylist_impl::length;

doc.add("function", "length(list)", "Get the number of items in `list`.");

export let capacity = _arraylist_impl::capacity;

doc.add("function", "capacity(list)", "Get the maximum number of items `list` can hold.");

export let get = _arraylist_impl::get;

doc.add("function", "get(list, idx)", "Get the element of `list` at index `idx`.");

export let set = _arraylist_impl::set;

doc.add("function", "set(list, idx, value)", "Set the element of `list` at index `idx` to `value`.");

export let delete = _arraylist_impl::delete;

doc.add(
  "function",
  "delete(list, idx)",
  "Remove the element at index `idx` from `list`. This involves shuffling all
elements after `idx` leftward, so it's not very efficient.",
);

export let to_array = _arraylist_impl::to_array;

doc.add("function", "to_array(list)", "Copy the elements of `list` into a fixed-length array.");

export let push = _arraylist_impl::push;

doc.add(
  "function",
  "push(list, value)",
  "Push `value` on to the end of `list`, growing it if necessary.",
);

struct ArrayListCollector {}
export let collector = ArrayListCollector {};

trait::impl(iter::Collector, ArrayListCollector, struct {
  function init(self) {
    return new();
  }

  function reduce(self, list, value) {
    list.push(value);
    return list;
  }

  function finalize(self, list) {
    return list;
  }
});

doc.add("object", "collector", "A collector for converting an iterator into an arraylist.");

export let pop = _arraylist_impl::pop;

doc.add(
  "function",
  "pop(list)",
  "Remove and return the last element of `list`.",
);

export let foreach = _arraylist_impl::foreach;

doc.add(
  "function",
  "foreach(list, func)",
  "Call `func` for each element of `list`.",
);

export function find_index(self, func) {
  let len = self._length;
  let array = self._array;

  for (let i = 0; i < len; i += 1) {
    if (func(array[i], i, self)) {
      return i;
    }
  }

  return -1;
}

doc.add(
  "function",
  "find_index(list, func)",
  "Get the index of the first element that satisfies the predicate `func`, or -1
if none exists.",
);

export function map(self, func) {
  let len = self._length;
  let cap = self.capacity();
  let new_array = _array::new(cap);

  self.foreach(function(val, i) {
    new_array[i] = func(val);
  });

  return from_array(len, new_array);
}

doc.add(
  "function",
  "map(list, func)",
  "Create a new arraylist where each element is the result of calling `func` on
the corresponding element of `list`.",
);

export function find(self, func) {
  let index = self.find_index(func);

  if (index < 0) {
    return null;
  }

  return self.get(index);
}

doc.add(
  "function",
  "find(list, func)",
  "Get the first element that satisfies the predicate `func`, or null if none exists.",
);

export function some(self, f) {
    return -1 != self.find_index(f);
}

doc.add(
  "function",
  "some(list, func)",
  "Check if any element in `list` satisfies the predicate `func`.",
);

export function contains(self, a) {
    return self.some(function (b) {
        return a == b;
    });
}

doc.add(
  "function",
  "contains(list, thing)",
  "Check if any element in `list` is equal to `thing`.",
);