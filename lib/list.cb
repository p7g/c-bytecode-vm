import _iter;
import array;
import docs;
import trait;

let doc = docs::module("list", "A doubly-linked list implementation.");

export struct Error { message }

struct List {
  first, last, length,
}

struct Node {
  value, prev, next
}

export function new() {
  return List{
    length = 0,
  };
}

doc.add("function", "new()", "Create a new, empty linked list.");

trait::impl(_iter::Iterable, List, struct {
  function iter(self) {
    return ListIterator { current = self.first };
  }
});

struct ListIterator { current }

trait::impl(_iter::Iterable, ListIterator, struct {
  function iter(self) {
    return self;
  }
});

trait::impl(_iter::Iterator, ListIterator, struct {
  function next(self) {
    if (self.current == null) {
      return _iter::STOP;
    }
    let node = self.current;
    self.current = node.next;
    return node.value;
  }
});

export function length(self) {
  return self.length;
}

doc.add("function", "length(list)", "Get the length of the list.");

export function prepend(self, value) {
  let node = Node {
    value = value,
    next = self.first,
  };
  if (self.first) {
    self.first.prev = node;
  } else {
    self.last = node;
  }
  self.first = node;
  self.length += 1;
}

doc.add("function", "prepend(list, value)", "Insert `value` at the front of `list`");

export function append(self, value) {
  let node = Node {
    value = value,
    prev = self.last,
  };
  if (self.last) {
    self.last.next = node;
  } else {
    self.first = node;
  }
  self.last = node;
  self.length += 1;
}

doc.add("function", "append(list, value)", "Append `value` to the end of `list`.");

export function pop(self) {
  if (length(self) == 0) {
    throw Error { message = "pop from empty list" };
  }
  let node = self.last;
  self.last = node.prev;
  if (self.last) {
    self.last.next = null;
  } else {
    self.first = null;
  }
  self.length = self.length - 1;
  return node.value;
}

doc.add(
  "function",
  "pop(list)",
  "Remove and return the last element from `list`. If `list` is empty throw an Error.",
);

export function unshift(self) {
  if (length(self) == 0) {
    throw Error { message = "unshift from empty list" };
  }
  let node = self.first;
  self.first = node.next;
  if (self.first) {
    self.first.prev = null;
  } else {
    self.last = null;
  }
  self.length = self.length - 1;
  return node.value;
}

doc.add(
  "function",
  "unshift(list)",
  "Remove and return the first element from `list`. If `list` is empty throw an Error.",
);

export function get(list, i) {
  if (i < 0 || i >= length(list)) {
    throw Error { message = string_concat("Index ", tostring(i), " is out of bounds") };
  }

  let current = list.first;
  while (i > 0) {
    current = current.next;
    i -= 1;
  }
  return current.value;
}

doc.add(
  "function",
  "get(list, i)",
  "Get the `i`th element from `list`. Throw if `i` is out of bounds.

Note that this function is `O(n)`.",
);

export function foreach(self, func) {
  let current = self.first;
  for (let i = 0; current; i += 1) {
    if (func(current.value, i, self) == _iter::STOP) {
      break;
    }
    current = current.next;
  }
}

doc.add("function", "foreach(list, func)", "Call `func` for every element of `list`.");

export function find(self, func) {
  let current = self.first;
  for (let i = 0; current; i += 1) {
    if (func(current.value, i, self)) {
      return current.value;
    }
    current = current.next;
  }

  return null;
}

doc.add(
  "function",
  "find(list, func)",
  "Return the first element of `list` that satisfies the predicate `func`.

If none is found, this function returns `null`.",
);

export function reverse(self) {
  let list = new();
  foreach(self, function (value) {
    prepend(list, value);
  });
  return list;
}

doc.add("function", "reverse(list)", "Make a new linked list that is the reverse of `list`.");

struct ListCollector {}

export let collector = ListCollector {};

trait::impl(_iter::Collector, ListCollector, struct {
  function init(self) {
    return new();
  }

  function reduce(self, list, value) {
    append(list, value);
    return list;
  }

  function finalize(self, list) {
    return list;
  }
});

doc.add("object", "collector", "A collector to convert an iterator into a list.");

export function map(self, func) {
  let list = new();
  foreach(self, function (value, i, self) {
    append(list, func(value, i, self));
  });
  return list;
}

doc.add(
  "function",
  "map(list, func)",
  "Create a new linked list where every element is calculated by calling `func` on the old element.",
);

export function to_array(self) {
  let arr = array::new(length(self));

  foreach(self, function(val, i) {
    arr[i] = val;
  });

  return arr;
}

doc.add("function", "to_array(list)", "Create a new array with the elements of `list`.");

export function foldl(self, init, reducer) {
  for (let current = self, i = 0; current; current = current.cdr) {
    init = reducer(init, current.car, i, self);
    i += 1;
  }
  return init;
}

doc.add("function", "foldl(list, init, reducer)", "Reduce the list from the left.");