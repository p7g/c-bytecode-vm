import array;
import docs;
import hashmap;
import sys;

let doc = docs.module("obj", "A simple object system.");

export struct NoSuchMethodError { method_name }

doc:add("struct", "NoSuchMethodError", "Error raised when an unrecognized message is sent to an object.");

struct Class { super, methods }
struct Object { class, dict }

export function class(super, methods) {
  return Class{super=super, methods=methods};
}

doc:add("function", "class(super, methods)", "Define a class that extends `super`.

The `methods` value should be a hashmap of functions.
");

export function new(class, args) {
  let obj = Object{class=class, dict=hashmap.new()};
  send(obj, "init", args);
  return obj;
}

doc:add("function", "new(class, args)", "Create an instance of a class.");

export function getclass(obj) {
  return obj:class;
}

doc:add("function", "getclass(obj)", "Get the class of `obj`.");

export function getsuper(cls) {
  return cls:super;
}

doc:add("function", "getsuper(cls)", "Get the superclass of the class `cls`.");

function resolve_method(cls, name) {
  let meth = null;

  while ((meth = hashmap.get(cls:methods, name)) == null
    && (cls = cls:super) != null) {}
  return meth;
}

export function _send(cls, obj, msg, args) {
  let meth = resolve_method(cls, msg);
  if (meth == null) {
    meth = resolve_method(cls, "method_missing");
    if (meth == null) {
      sys.panic(NoSuchMethodError { method_name = msg });
    }
    let args_len = array.length(args);
    let new_args = array.new(args_len + 2);
    new_args[0] = obj;
    new_args[1] = msg;
    array.foreach(args, function(v, i) {
      new_args[i + 2] = v;
    });
    args = new_args;
  } else {
    let args_len = array.length(args);
    let new_args = array.new(args_len + 1);
    new_args[0] = obj;
    array.foreach(args, function(v, i) {
      new_args[i + 1] = v;
    });
    args = new_args;
  }
  return apply(meth, args);
}

doc:add(
  "function",
  "_send(cls, obj, msg, args)",
  "Manually call the method `msg` on class `cls`, using `obj` as the instance.

Note that there is no guarantee that the method called is compatible with `obj`.",
);

export function send(obj, msg, args) {
  return _send(obj:class, obj, msg, args);
}

doc:add("function", "send(obj, msg, args)", "Call the method `msg` on `obj`.");

export function super(obj, msg, args) {
  return _send(obj:class:super, obj, msg, args);
}

doc:add("function", "super(obj, msg, args)", "Call the method `msg` on the superclass object of `obj`.");

export function getattr(obj, name) {
  return hashmap.get(obj:dict, name);
}

doc:add("function", "getattr(obj, name)", "Get an attribute from the internal dictionary of `obj`.");

export function setattr(obj, name, value) {
  hashmap.set(obj:dict, name, value);
}

doc:add("function", "setattr(obj, name)", "Set an attribute on the internal dictionary of `obj`.");