import arraylist;
import docs;
import iter;
import trait;

let doc = docs::module(
  "assoclist",
  "A map data structure backed by an arraylist of key-value pairs.",
);

export let new = arraylist::new;
export let length = arraylist::length;

doc.add("function", "new", "Create an empty assoclist.");
doc.add("function", "length", "Check the number of items in the list.");

function get_entry(self, key) {
  return arraylist::find(self, function([k]) {
    return k == key;
  });
}

struct AssocListCollector {}
export let collector = AssocListCollector {};

trait::impl(iter::Collector, AssocListCollector, struct {
  function init(self) {
    return new();
  }

  function reduce(self, list, [key, value]) {
    set(list, key, value);
    return list;
  }

  function finalize(self, list) {
    return list;
  }
});

doc.add("object", "collector", "A collector for converting an iterator of
entries into an assoclist.");

export function set(self, key, value) {
  let found = get_entry(self, key);

  if (found == null) {
    arraylist::push(self, [key, value]);
  } else {
    found[1] = value;
  }
}

doc.add(
  "function",
  "set(list, key, value)",
  "Set the value of `key` in `list` to `value`.",
);

export function get(self, key) {
  let found = get_entry(self, key);

  if (found == null) {
    return null;
  } else {
    return found[1];
  }
}

doc.add(
  "function",
  "get(list, key)",
  "Get the first value of `key` in `list`.",
);

export function delete(self, key) {
  let idx = arraylist::find_index(self, function(entry) {
    return entry[0] == key;
  });

  if (idx < 0) {
    return false;
  } else {
    arraylist::delete(self, idx);
  }
}

doc.add(
  "function",
  "delete(list, key)",
  "Delete the first entry for `key` in `list`.",
);

export function has(self, key) {
  return null != arraylist::find(self, function(entry) {
    return entry[0] == key;
  });
}

doc.add(
  "function",
  "has(list, key)",
  "Check if an entry for `key` exists in `list`.",
);

export function is_empty(self) {
  return arraylist::length(self) == 0;
}

doc.add("function", "is_empty(list)", "Check if `list` has no elements.");

export function entries(self) {
  return arraylist::to_array(self);
}

doc.add("function", "entries(list)", "Get all entries from `list`.");