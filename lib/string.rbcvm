import array;
import char;
import fn;
import iter;
import op;
import sys;

import _string;

export let chars = string_chars;
export let from_chars = string_from_chars;
export let bytes = string_bytes;
export let concat = string_concat;
export let buf = _string.buf;
export let resize_buf = _string.resize_buf;
export let length = _string.len;
export let char_at = _string.char_at;

export function parse_integer(str, base) {
  let sum = 0;
  let cs = chars(str);
  array.reverse(cs);

  array.foreach(cs, function(char, i) {
    if (char.is_digit(char)) {
      sum = sum + toint(char.to_digit(char) * base ** i);
    }
  });

  return sum;
}

export function parse_float(str) {
  let sum = 0.0;
  let negate = false;
  let chars = chars(str);

  if (chars[0] == '-') {
    negate = true;
  }

  chars = iter.from_array(chars);
  if (negate) {
    chars = iter.drop(chars, 1);
  }

  let integer_chars = iter.collect(iter.take_while(chars, fn.curry(op.ne, '.')));
  sum = sum + parse_integer(from_chars(integer_chars), 10);

  iter.foreach(iter.enumerate(chars), function(ic) {
    let i = ic[0];
    let c = ic[1];
    sum = sum + tofloat(char.to_digit(c)) / 10 ** (i + 1);
  });

  if (negate) {
    sum = sum * -1;
  }

  return sum;
}

export function slice(self, start, end) {
  let cs = chars(self);
  return from_chars(array.slice(cs, start, end));
}

export function startswith(self, other) {
    let otherlen = length(other);
    if (otherlen > length(self)) {
        return false;
    }
    for (let i = 0; i < otherlen; i = i + 1) {
        if (char_at(self, i) != char_at(other, i)) {
            return false;
        }
    }
    return true;
}

export function endswith(self, other) {
    let otherlen = length(other);
    let selflen = length(self);
    if (otherlen > selflen) {
        return false;
    }
    for (let i = 0; i < otherlen; i = i + 1) {
        if (char_at(self, selflen - i) != char_at(other, otherlen - i)) {
            return false;
        }
    }
    return true;
}

export function index(self, c) {
    if (type_of(c) != "char") {
        sys.panic("index: Only finding index of char is implemented");
    }
    let len = length(self);
    for (let i = 0; i < len; i = i + 1) {
        if (char_at(self, i) == c) {
            return i;
        }
    }
    return -1;
}

export function rindex(self, c) {
    if (type_of(c) != "char") {
        sys.panic("index: Only finding index of char is implemented");
    }
    for (let i = length(self) - 1; i >= 0; i = i - 1) {
        if (char_at(self, i) == c) {
            return i;
        }
    }
    return -1;
}

export function contains(self, c) {
    return -1 != index(self, c);
}