import array;
import docs;

let doc = docs.module("fn", "Functional programming utilities.");

# Re-export the intrinsic apply function.
let _apply = apply;
export let apply = _apply;

doc:add("function", "apply(func, args)", "Call `func`, passing as arguments the elements of the array `args`.");

export function identity(n) {
    return n;
}

doc:add("function", "identity(x)", "Return `x`.");

export function flip(f) {
    return function(a, b) {
        return f(b, a);
    };
}

doc:add("function", "flip(f)", "Return a function `g(a, b)` which calls `f(b, a)`.");

export function curry(fn, a) {
    return function(b) {
        return fn(a, b);
    };
}

doc:add("function", "curry(fn, a)", "Return a `fn` partially-applied with `a`.");

export function partial(fn, args) {
    return array.foldl(args, fn, function(acc, i) {
        return curry(acc, i);
    });
}

doc:add("function", "partial(fn, args)", "Honestly not really sure what this does lol");

export function compose(functions) {
    return array.foldl1(functions, function(acc, fn) {
        return function(arg) {
            return acc(fn(arg));
        };
    });
}

doc:add("function", "compose(functions)", "Pipe the function return values from right-to-left.

For example, `compose([a, b, c])(\"test\")` is equivalent to `a(b(c(\"test\")))`.");

export let chain = compose([compose, array.reversed]);

doc:add("function", "chain(functions)", "The same as `compose`, except the values are piped left-to-right.");