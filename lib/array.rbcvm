import _array;
import docs;
import iter;

let doc = docs.module("array", "Functions for working with arrays.");

export let new = _array.new;
doc:add(
  "function",
  "new(len, init=null)",
  "Create a new array of length `len`. Each element is initialized to `init`.",
);

export let length = _array.length;
doc:add("function", "length(array)", "Get the length of array `array`.");

export let iter = iter._array_iter;

doc:add("function", "iter(array)", "Create an iterator from array `array`.");

export let collector = iter._array_collector;

doc:add("object", "collector", "A collector for converting an iterator into an array.");

export function find_index(self, func) {
  let len = length(self);

  for (let i = 0; i < len; i = i + 1) {
    if (func(self[i], i, self)) {
      return i;
    }
  }

  return -1;
}

doc:add(
  "function",
  "find_index(array, predicate)",
  "Find the index of the element for which `predicate` returns true. If there is none, returns -1.",
);

export function find(self, func) {
    let idx = find_index(self, func);
    if (idx >= 0) {
        return self[idx];
    }
    return null;
}

doc:add(
  "function",
  "find(array, predicate)",
  "Find the element for which `predicate` returns true. If there is none, returns null.",
);

export function foreach(self, func) {
  let len = length(self);

  for (let i = 0; i < len; i = i + 1) {
    func(self[i], i, self);
  }
}

doc:add(
  "function",
  "foreach(array, func)",
  "Call `func` with the element, index, and array for each element of `array`.",
);

export function contains(self, thing) {
  return -1 != find_index(self, function(i) {
    return i == thing;
  });
}

doc:add(
  "function",
  "contains(array, thing)",
  "Returns true if any element of `array` is equal to `thing`.",
);

export function map(self, func) {
  let len = length(self);
  let new_array = new(len);

  for (let i = 0; i < len; i = i + 1) {
    new_array[i] = func(self[i], i, self);
  }

  return new_array;
}

doc:add(
  "function",
  "map(array, func)",
  "Create a new array where each element is the result of calling `func` on the
corresponding element of `array`.",
);

export function foldl(self, init, reducer) {
  let len = length(self);

  for (let i = 0; i < len; i = i + 1) {
    let item = self[i];
    init = reducer(init, item, i, self);
  }

  return init;
}

doc:add(
  "function",
  "foldl(array, init, reducer)",
  "Reduce `array` from the left, using `init` as the initial value for the
accumulator.",
);

export function foldl1(self, reducer) {
  let len = length(self);
  let acc = self[0];

  for (let i = 1; i < len; i = i + 1) {
    let item = self[i];
    acc = reducer(acc, item, i, self);
  }

  return acc;
}

doc:add(
  "function",
  "foldl(array, init, reducer)",
  "Reduce `array` from the left, using the first value of `array` as the initial
value for the accumulator.",
);

export function reverse(self) {
  let len = length(self);
  let half = len / 2;

  let tmp;
  for (let i = 0; i < half; i = i + 1) {
    tmp = self[i];
    self[i] = self[len - i - 1];
    self[len - i - 1] = tmp;
  }
}

doc:add("function", "reverse(array)", "Reverse `array` in place.");

export function reversed(self) {
  let len = length(self);
  let copy = new(len);

  for (let i = 0; i < len; i = i + 1) {
    copy[len - i - 1] = self[i];
  }

  return copy;
}

doc:add("function", "reversed(array)", "Create a new array with the elements of `array` reversed.");

export function slice(self, start, end) {
    let sub = new(end - start);
    for (let i = start; i < end; i = i + 1) {
        sub[i - start] = self[i];
    }
    return sub;
}

doc:add(
  "function",
  "slice(array, start, end)",
  "Returns a slice of `array` starting at index `start` and ending at index `end`.",
);

export function copy(self) {
    let len = length(self);
    let copy = new(len);

    for (let i = 0; i < len; i = i + 1) {
        copy[i] = self[i];
    }

    return copy;
}

doc:add(
    "function",
    "copy(array)",
    "Create a shallow copy of `array`.",
);

export function get(array, index, fallback=null) {
    if (index >= length(array)) {
        return fallback;
    }
    return array[index];
}

doc:add(
    "function",
    "get(array, index, fallback=null)",
    "If `index` is out of `array`'s bounds, return `fallback`. Otherwise return the element of `array` at `index`.",
);