module Array;

export let new = array_new;
export let length = array_length;

export function find(self, func) {
  let len = length(self);

  for let i = 0; i < len; i = i + 1 {
    if func(self[i], i, self) {
      return self[i];
    }
  }

  return null;
}

export function foreach(self, func) {
  let len = length(self);

  for let i = 0; i < len; i = i + 1 {
    func(self[i], i, self);
  }
}

export function contains(self, thing) {
  return null != find(self, function(i) {
    return i == thing;
  });
}

export function map(self, func) {
  let len = length(self);
  let new_array = new(len);

  for let i = 0; i < len; i = i + 1 {
    new_array[i] = func(self[i], i, self);
  }

  return new_array;
}

export function foldl(self, init, reducer) {
  let len = length(self);

  for let i = 0; i < len; i = i + 1 {
    let item = self[i];
    init = reducer(init, item, i, self);
  }

  return init;
}

export function foldl1(self, reducer) {
  let len = length(self);
  let acc = self[0];

  for let i = 1; i < len; i = i + 1 {
    let item = self[i];
    acc = reducer(acc, item, i, self);
  }

  return acc;
}

export function reverse(self) {
  let len = length(self);
  let half = len / 2;

  let tmp;
  for let i = 0; i <= half; i = i + 1 {
    tmp = self[i];
    self[i] = self[len - i - 1];
    self[len - i - 1] = tmp;
  }
}

export function reversed(self) {
  let len = length(self);
  let copy = new(len);

  for let i = 0; i < len; i = i + 1 {
    copy[len - i - 1] = self[i];
  }

  return copy;
}

export function slice(self, start, end) {
    let sub = new(end - start);
    for let i = start; i < end; i = i + 1 {
        sub[i - start] = self[i];
    }
    return sub;
}
