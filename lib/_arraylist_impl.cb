import _array;
import _iter_stop;

export struct ArrayList {
  _length,
  _array,

  function length() {
    return this._length;
  }

  function capacity() {
    return _array::length(this._array);
  }

  function get(idx) {
    return this._array[idx];
  }

  function set(idx, value) {
    this._array[idx] = value;
  }
  
  function delete(index) {
    let len = this._length;

    for (let i = index + 1; i < len; i += 1) {
      this.set(i - 1, this.get(i));
    }

    self._length = len - 1;
  }

  function to_array() {
    let new_array = _array::new(this._length);

    this.foreach(function(val, i) {
      new_array[i] = val;
    });

    return new_array;
  }

  function push(value) {
    let next_idx = this._length;
    let array = this._array;
    let len = _array::length(array);

    if (next_idx >= len) {
      let new_array = _array::new(2 * len);
      for (let i = 0; i < next_idx; i += 1) {
        new_array[i] = array[i];
      }
      this._array = array = new_array;
    }

    array[next_idx] = value;
    this._length = next_idx + 1;
    return this;  # Return `this` to enable use as a reducer function.
  }

  function pop() {
    if (this._length <= 0) {
      return null;
    }

    let i = this._length = this._length - 1;
    return this._array[i];
  }

  function foreach(func) {
    let len = this._length;
    let array = this._array;

    for (let i = 0; i < len; i += 1) {
      if (func(array[i], i, this) == _iter_stop::STOP) {
        break;
      }
    }
  }

  function find_index(func) {
    let result = -1;
    this.foreach(function (val, i, self) {
      if (func(val, i, self)) {
        result = i;
        return _iter_stop::STOP;
      }
    });
    return result;
  }

  function map(func) {
    let new_array = _array::new(this.capacity());
    this.foreach(function (val, i, self) {
      new_array[i] = func(self.get(i), i, self);
    });
    return from_array(this._length, new_array);
  }

  function find(func) {
    let index = this.find_index(func);

    if (index < 0) {
      return null;
    }

    return this.get(index);
  }

  function some(func) {
    return this.find_index(func) != -1;
  }

  function contains(a) {
    return this.some(function (b) {
      return a == b;
    });
  }
}

let INITIAL_SIZE = 16;

export function from_array(len, array) {
  return ArrayList{_length=len, _array=array};
}

export function with_capacity(cap) {
  return from_array(0, _array::new(cap));
}

export function new() {
  return with_capacity(INITIAL_SIZE);
}

export function length(self) {
  return self._length;
}

export function capacity(self) {
  return _array::length(self._array);
}

export function get(self, idx) {
  return self._array[idx];
}

export function set(self, idx, value) {
  self._array[idx] = value;
}

export function delete(self, index) {
  let len = self._length;

  for (let i = index + 1; i < len; i += 1) {
    self.set(i - 1, self.get(i));
  }

  self._length = len - 1;
}

export function to_array(self) {
  let new_array = _array::new(self._length);

  self.foreach(function(val, i) {
    new_array[i] = val;
  });

  return new_array;
}

export function push(self, value) {
  let next_idx = self._length;
  let array = self._array;
  let len = _array::length(array);

  if (next_idx >= len) {
    let new_array = _array::new(2 * len);
    for (let i = 0; i < next_idx; i += 1) {
      new_array[i] = array[i];
    }
    self._array = array = new_array;
  }

  array[next_idx] = value;
  self._length = next_idx + 1;
  return self;  # Return `self` to enable use as a reducer function.
}

export function pop(self) {
  if (self._length <= 0) {
    return null;
  }

  let i = self._length = self._length - 1;
  return self._array[i];
}

export function foreach(self, func) {
  let len = self._length;
  let array = self._array;

  for (let i = 0; i < len; i += 1) {
    if (func(array[i], i, self) == _iter_stop::STOP) {
      break;
    }
  }
}