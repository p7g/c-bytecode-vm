import bytes;
import docs;
import trait;

export struct Error {
    message,
}

let doc = docs::module("hash", "Hashing functions.");

export let Hashable = trait::new("Hashable", [trait::method("hash")]);
export let hash = Hashable.hash;

let FNV_OFFSET_BASIS_32 = 2166136261;
let FNV_PRIME_32 = 16777619;

export function fnv1a(bytes) {
  let len = bytes::length(bytes);
  let hash = FNV_OFFSET_BASIS_32;

  for (let i = 0; i < len; i += 1) {
    let byte = bytes::get(bytes, i);
    hash ^= byte;
    hash *= FNV_PRIME_32;
    hash &= 0xffffffff;
  }

  return hash;
}

doc.add(
  "function",
  "fnv1a(bytes)",
  "Applies the 32bit FNV-1a hashing algorithm to a byte array.",
);

trait::impl(Hashable, trait::primitive("integer"), struct {
    function hash(self) {
        return self;
    }
});

trait::impl(Hashable, trait::primitive("char"), struct {
    function hash(self) {
        return ord(self);
    }
});

trait::impl(Hashable, trait::primitive("string"), struct {
    function hash(self) {
        # FIXME: Should probably normalize the string (either here or when
        # creating the string)
        return fnv1a(string_bytes(self));
    }
});

trait::impl(Hashable, trait::primitive("boolean"), struct {
    function hash(self) {
        if (self) {
            return 1;
        } else {
            return 0;
        }
    }
});

trait::impl(Hashable, trait::primitive("null"), struct {
    function hash(self) {
        return 0;
    }
});

trait::impl(Hashable, trait::primitive("bytes"), struct {
    function hash(self) {
        return fnv1a(self);
    }
});