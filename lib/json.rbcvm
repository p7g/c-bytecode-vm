import array;
import arraylist;
import char;
import docs;
import hashmap;
import string;
import sys;

let doc = docs.module("json", "A partial implementation of a JSON parser.");

let T_LEFT_BRACE = 0;
let T_RIGHT_BRACE = 1;
let T_LEFT_BRACKET = 2;
let T_RIGHT_BRACKET = 3;
let T_COLON = 4;
let T_COMMA = 5;
let T_STRING = 6;
let T_NUMBER = 7;
let T_TRUE = 8;
let T_FALSE = 9;
let T_NULL = 10;

export struct UnexpectedTokenError { message }
export struct InvalidJsonError { message }

doc:add(
  "struct",
  "UnexpectedTokenError",
  "Error raised when an unexpected token is encountered.",
);
doc:add(
  "struct",
  "InvalidJsonError",
  "Error raised when the input string is not able to be parsed.",
);

function raise(code, context) {
  sys.panic(Error { code = code, context = context });
}

struct Token {
  type, value
}

function tokenize(input) {
  let chars = string.chars(input);
  let tokens = arraylist.new();
  let len = array.length(chars);
  let i = 0;

  while (i < len) {
    let char = chars[i];
    let token;

    if (char == ' '
        || char == '\n'
        || char == '\r'
        || char == '\t') {
      i = i + 1;
      continue;
    } else if (char == '{') {
      token = Token{type=T_LEFT_BRACE, value="{"};
      i = i + 1;
    } else if (char == '}') {
      token = Token{type=T_RIGHT_BRACE, value="}"};
      i = i + 1;
    } else if (char == '[') {
      token = Token{type=T_LEFT_BRACKET, value="["};
      i = i + 1;
    } else if (char == ']') {
      token = Token{type=T_RIGHT_BRACKET, value="]"};
      i = i + 1;
    } else if (char == ':') {
      token = Token{type=T_COLON, value=":"};
      i = i + 1;
    } else if (char == ',') {
      token = Token{type=T_COMMA, value=","};
      i = i + 1;
    } else if (char == 't'
        && chars[i + 1] == 'r'
        && chars[i + 2] == 'u'
        && chars[i + 3] == 'e') {
      token = Token{type=T_TRUE, value="true"};
      i = i + 4;
    } else if (char == 'f'
        && chars[i + 1] == 'a'
        && chars[i + 2] == 'l'
        && chars[i + 3] == 's'
        && chars[i + 4] == 'e') {
      token = Token{type=T_FALSE, value="false"};
      i = i + 5;
    } else if (char == 'n'
        && chars[i + 1] == 'u'
        && chars[i + 2] == 'l'
        && chars[i + 3] == 'l') {
      token = Token{type=T_NULL, value="null"};
      i = i + 4;
    } else if (char == '"') {
      let str = "";
      i = i + 1;

      while (i < len && chars[i] != '"') {
        str = string_concat(str, tostring(chars[i]));
        i = i + 1;
      }

      i = i + 1;
      token = Token{type=T_STRING, value=str};
    } else if (char.is_digit(char) || char == '-') {
      let is_float = false;
      let c;
      let str;
      if (char == '-') {
        i = i + 1;
        c = chars[i];
        str = tostring(char);
      } else {
        c = char;
        str = "";
      }
      if (c == '0') {
        is_float = true;
        i = i + 1;
        str = string_concat(str, "0");
      } else if (char.is_digit(c) && c != '0') {
        str = string_concat(str, tostring(c));
        i = i + 1;
      } else {
        raise(UnexpectedTokenError { message = c });
      }

      if (chars[i] == '.') {
        is_float = true;
        i = i + 1;
        str = string_concat(str, ".");
      } else if (is_float) {
        raise(UnexpectedTokenError { message = chars[i] });
      }

      while (i < len && char.is_digit(chars[i])) {
        str = string_concat(str, tostring(chars[i]));
        i = i + 1;
      }

      token = Token{type=T_NUMBER, value=str};
    } else {
      raise(UnexpectedTokenError { message = char });
    }

    arraylist.push(tokens, token);
  }

  return arraylist.to_array(tokens);
}

function parse_value(next, peek) {
  let token = next();
  let type = token:type;
  let value = token:value;

  let ret;
  if (type == T_NUMBER) {
    ret = string.parse_float(value, 10);
  } else if (type == T_STRING) {
    ret = value;
  } else if (type == T_TRUE) {
    ret = true;
  } else if (type == T_FALSE) {
    ret = false;
  } else if (type == T_NULL) {
    ret = null;
  } else if (type == T_LEFT_BRACE) {
    let values = hashmap.new();
    let is_first = true;

    while (peek():type != T_RIGHT_BRACE) {
      if (!is_first) {
        let comma = next();
        if (comma:type != T_COMMA) {
          raise(UnexpectedTokenError {
            message = string_concat("Expected comma, found '", comma:value, "'"),
          });
        }
      } else {
        is_first = false;
      }

      let key = parse_value(next, peek);

      if (typeof(key) != "string") {
        raise(UnexpectedTokenError {
          message = string_concat("Expected string, found ", key),
        });
      }

      let colon = next();
      if (colon:type != T_COLON) {
        raise(UnexpectedTokenError {
          message = string_concat("Expected colon, found '", comma:value, "'"),
        });
      }

      let map_value = parse_value(next, peek);
      hashmap.set(values, key, map_value);
    }

    next();  # consume right brace

    ret = values;
  } else if (type == T_LEFT_BRACKET) {
    let values = arraylist.new();

    let is_first = true;
    while (peek():type != T_RIGHT_BRACKET) {
      if (!is_first) {
        let comma = next();
        if (comma:type != T_COMMA) {
          raise(UnexpectedTokenError {
            message = string_concat("Expected comma, found '", comma:value, "'"),
          });
        }
      } else {
        is_first = false;
      }

      let value = parse_value(next, peek);
      arraylist.push(values, value);
    }

    next(); # consume right bracket

    ret = arraylist.to_array(values);
  } else {
    raise(UnexpectedTokenError {
      message = string_concat("Unexpected token ", tostring(value)),
    });
  }

  return ret;
}

export function parse(input) {
  let tokens = tokenize(input);
  let len = array.length(tokens);
  let i = 0;

  function peek() {
    return tokens[i];
  }

  function next() {
    let value = tokens[i];
    i = i + 1;
    return value;
  }

  let data = parse_value(next, peek);

  if (i != len) {
    raise(InvalidJsonError {
      message = string_concat("Expected EOF, found ", tostring(tokens[i - 1]:value)),
    });
  }

  return data;
}

doc:add("function", "parse(input)", "Parse the string `input` as JSON.");