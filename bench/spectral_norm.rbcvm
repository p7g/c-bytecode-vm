import array;
import math;
import string;

function eval_A(i, j) {
    return 1.0 / ((i + j) * (i + j + 1) / 2 + i + 1);
}

function eval_A_times_u(N, u, Au) {
    for (let i = 0; i < N; i = i + 1) {
        Au[i] = 0;
        for (let j = 0; j < N; j = j + 1) {
            Au[i] = Au[i] + eval_A(i, j) * u[j];
        }
    }
}

function eval_At_times_u(N, u, Au) {
    for (let i = 0; i < N; i = i + 1) {
        Au[i] = 0;
        for (let j = 0; j < N; j = j + 1) {
            Au[i] = Au[i] + eval_A(j, i) * u[j];
        }
    }
}

function eval_AtA_times_u(N, u, AtAu) {
    let v = array::new(N, 0);
    eval_A_times_u(N, u, v);
    eval_At_times_u(N, v, AtAu);
}

function main(n) {
    let u = array::new(n, 1);
    let v = array::new(n, 0);

    for (let i = 0; i < 10; i = i + 1) {
        eval_AtA_times_u(n, u, v);
        eval_AtA_times_u(n, v, u);
    }

    let vBv, vv;
    vBv = vv = 0;
    for (let i = 0; i < n; i = i + 1) {
        vBv = vBv + u[i] * v[i];
        vv = vv + v[i] ** 2;
    }
    println(math::sqrt(vBv / vv));
}

main(string::parse_integer(argv()[0]));
