import array;
import arraylist;
import fs;
import iter;
import string;

struct Tape {
    pos,
    data,

    function get() {
        return this.data.get(this.pos);
    }

    function inc(n) {
        this.data.set(this.pos, this.data.get(this.pos) + n);
    }

    function move(n) {
        this.pos += n;
        if (this.pos >= this.data.length()) {
            this.data.push(0);
        }
    }
}

function tape_new() {
    return Tape {
        pos = 0,
        data = arraylist::from_array(1, [0]),
    };
}

struct Op { type, value }

function parse(it) {
    let ops = arraylist::new();
    let c;

    while ((c = iter::next(it)) != iter::STOP) {
        if (c == '+') {
            ops.push(Op{type="inc", value=1});
        } else if (c == '-') {
            ops.push(Op{type="inc", value=-1});
        } else if (c == '>') {
            ops.push(Op{type="move", value=1});
        } else if (c == '<') {
            ops.push(Op{type="move", value=-1});
        } else if (c == '.') {
            ops.push(Op{type="print"});
        } else if (c == '[') {
            ops.push(Op{type="loop", value=parse(it)});
        } else if (c == ']') {
            break;
        }
    }

    return ops.to_array();
}

function run(tape, ops) {
    let len = array::length(ops);

    for (let i = 0; i < len; i += 1) {
        let op = ops[i];

        if (op.type == "inc") {
            tape.inc(op.value);
        } else if (op.type == "move") {
            tape.move(op.value);
        } else if (op.type == "print") {
            print(chr(tape.get()));
        } else if (op.type == "loop") {
            while (tape.get() != 0) {
                run(tape, op.value);
            }
        }
    }
}

let args = argv();
if (array::length(args) != 1) {
    println("Usage: ./cbcvm bf.cb <program>");
} else {
    let it = iter::iter(fs::read_file(args[0]));
    run(tape_new(), parse(it));
}