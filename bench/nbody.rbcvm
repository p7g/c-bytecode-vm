import array;
import math;
import string;

let PI = 3.14159265358979323;
let SOLAR_MASS = 4 * PI * PI;
let DAYS_PER_YEAR = 365.24;

struct Body {
    x, y, z,
    vx, vy, vz,
    mass,
}

function offset_momentum(bodies) {
    let px, py, pz;
    px = py = pz = 0.0;
    let num_bodies = array::length(bodies);

    for (let i = 0; i < num_bodies; i += 1) {
        let b = bodies[i];
        px += b.vx * b.mass;
        py += b.vy * b.mass;
        pz += b.vz * b.mass;
    }

    let b = bodies[0];
    b.vx = -px / SOLAR_MASS;
    b.vy = -py / SOLAR_MASS;
    b.vz = -pz / SOLAR_MASS;
}

function energy(bodies) {
    let e = 0.0;
    let num_bodies = array::length(bodies);
    for (let i = 0; i < num_bodies; i += 1) {
        let b = bodies[i];
        let sq = b.vx ** 2 + b.vy ** 2 + b.vz ** 2;
        e += 0.5 * b.mass * sq;
        for (let j = i + 1; j < num_bodies; j += 1) {
            let b2 = bodies[j];
            let dx = b.x - b2.x;
            let dy = b.y - b2.y;
            let dz = b.z - b2.z;
            sq = dx ** 2 + dy ** 2 + dz ** 2;
            e -= (b.mass * b2.mass) / math::sqrt(sq);
        }
    }
    return e;
}

function advance(bodies, dt) {
    let num_bodies = array::length(bodies);
    for (let i = 0; i < num_bodies; i += 1) {
        let b = bodies[i];
        for (let j = i + 1; j < num_bodies; j += 1) {
            let b2 = bodies[j];

            let dx = b.x - b2.x;
            let dy = b.y - b2.y;
            let dz = b.z - b2.z;
            let dpos_norm_sq = dx ** 2 + dy ** 2 + dz ** 2;
            let mag = dt / (dpos_norm_sq * math::sqrt(dpos_norm_sq));

            let mj = b2.mass * mag;
            b.vx -= dx * mj;
            b.vy -= dy * mj;
            b.vz -= dz * mj;

            let mi = b.mass * mag;
            b2.vx += dx * mi;
            b2.vy += dy * mi;
            b2.vz += dz * mi;
        }
    }

    for (let i = 0; i < num_bodies; i += 1) {
        let b = bodies[i];
        b.x += b.vx * dt;
        b.y += b.vy * dt;
        b.z += b.vz * dt;
    }
}

function nbody(n) {
    let bodies = [
        # sun
        Body {
            x = 0.0,
            y = 0.0,
            z = 0.0,
            vx = 0.0,
            vy = 0.0,
            vz = 0.0,
            mass = SOLAR_MASS,
        },

        # jupiter
        Body {
            x = 4.84143144246472090,
            y = -1.16032004402742839,
            z = -0.103622044471123109,
            vx = 0.00166007664274403694 * DAYS_PER_YEAR,
            vy = 0.00769901118419740425 * DAYS_PER_YEAR,
            vz = -0.0000690460016972063023 * DAYS_PER_YEAR,
            mass = 0.000954791938424326609 * SOLAR_MASS,
        },

        # saturn
        Body {
            x = 8.34336671824457987,
            y = 4.12479856412430479,
            z = -0.403523417114321381,
            vx = -0.00276742510726862411 * DAYS_PER_YEAR,
            vy = 0.00499852801234917238 * DAYS_PER_YEAR,
            vz = 0.0000230417297573763929 * DAYS_PER_YEAR,
            mass = 0.000285885980666130812 * SOLAR_MASS,
        },

        # uranus
        Body {
            x = 12.8943695621391310,
            y = -15.1111514016986312,
            z = -0.223307578892655734,
            vx = 0.00296460137564761618 * DAYS_PER_YEAR,
            vy = 0.00237847173959480950 * DAYS_PER_YEAR,
            vz = -0.0000296589568540237556 * DAYS_PER_YEAR,
            mass = 0.0000436624404335156298 * SOLAR_MASS,
        },

        # neptune
        Body {
            x = 15.3796971148509165,
            y = -25.9193146099879641,
            z = 0.179258772950371181,
            vx = 0.00268067772490389322 * DAYS_PER_YEAR,
            vy = 0.00162824170038242295 * DAYS_PER_YEAR,
            vz = -0.0000951592254519715870 * DAYS_PER_YEAR,
            mass = 0.0000515138902046611451 * SOLAR_MASS,
        },
    ];

    offset_momentum(bodies);
    println(energy(bodies));
    for (let i = 0; i < n; i += 1) {
        advance(bodies, 0.01);
    }
    println(energy(bodies));
}

nbody(string::parse_integer(argv()[0]));