import array;
import arraylist;
import fs;
import string;

struct Tape { get, inc, move }

function tape_new() {
    let pos = 0;
    let data = arraylist.from_array(1, [0]);

    return Tape {
        get = function() {
            return arraylist.get(data, pos);
        },
        inc = function(n) {
            arraylist.set(data, pos, arraylist.get(data, pos) + n);
        },
        move = function(n) {
            pos = pos + n;
            if (pos >= arraylist.length(data)) {
                arraylist.push(data, 0);
            }
        },
    };
}

struct Op { type, value }

function parse(it) {
    let ops = arraylist.new();
    let c;

    while ((c = it())) {
        if (c == '+') {
            arraylist.push(ops, Op{type="inc", value=1});
        } else if (c == '-') {
            arraylist.push(ops, Op{type="inc", value=-1});
        } else if (c == '>') {
            arraylist.push(ops, Op{type="move", value=1});
        } else if (c == '<') {
            arraylist.push(ops, Op{type="move", value=-1});
        } else if (c == '.') {
            arraylist.push(ops, Op{type="print"});
        } else if (c == '[') {
            arraylist.push(ops, Op{type="loop", value=parse(it)});
        } else if (c == ']') {
            break;
        }
    }

    return arraylist.to_array(ops);
}

function run(tape, ops) {
    let len = array.length(ops);

    for (let i = 0; i < len; i = i + 1) {
        let op = ops[i];

        if (op:type == "inc") {
            tape:inc(op:value);
        } else if (op:type == "move") {
            tape:move(op:value);
        } else if (op:type == "print") {
            print(chr(tape:get()));
        } else if (op:type == "loop") {
            while (tape:get() != 0) {
                run(tape, op:value);
            }
        }
    }
}

let args = argv();
if (array.length(args) != 1) {
    println("Usage: ./cbcvm bf3.rbcvm <program>");
} else {
    let it = array.iter(string.chars(fs.read_file(args[0])));
    run(tape_new(), parse(it));
}
