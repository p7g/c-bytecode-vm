import "lib/array.rbcvm";
import "lib/arraylist.rbcvm";
import "lib/string.rbcvm";

struct Tape {
    pos,
    data,
}

function tape_new() {
    return Tape {
        pos = 0,
        data = [0],
    };
}

function tape_get(t) {
    return t:data[t:pos];
}

function tape_inc(t, n) {
    t:data[t:pos] = t:data[t:pos] + n;
}

function tape_move(t, n) {
    t:pos = t:pos + n;
    let len = Array.length(t:data);
    if (t:pos >= len) {
        let new_array = Array.new(t:pos + 1);
        for (let i = 0; i < t:pos; i = i + 1) {
            new_array[i] = t:data[i];
        }
        for (let i = len; i <= t:pos; i = i + 1) {
            new_array[i] = 0;
        }
        t:data = new_array;
    }
}

function string_iterator(s) {
    let pos = 0;
    let cs = String.chars(s);
    let len = Array.length(cs);
    return function() {
        if (pos >= len) {
            return null;
        }
        let val = cs[pos];
        pos = pos + 1;
        return val;
    };
}

struct Op { type, value }

function parse(it) {
    let ops = ArrayList.new();
    let c;

    while ((c = it())) {
        if (c == '+') {
            ArrayList.push(ops, Op{type="inc", value=1});
        } else if (c == '-') {
            ArrayList.push(ops, Op{type="inc", value=-1});
        } else if (c == '>') {
            ArrayList.push(ops, Op{type="move", value=1});
        } else if (c == '<') {
            ArrayList.push(ops, Op{type="move", value=-1});
        } else if (c == '.') {
            ArrayList.push(ops, Op{type="print"});
        } else if (c == '[') {
            ArrayList.push(ops, Op{type="loop", value=parse(it)});
        } else if (c == ']') {
            break;
        }
    }

    return ArrayList.to_array(ops);
}

function run(ops, tape) {
    let len = Array.length(ops);
    for (let i = 0; i < len; i = i + 1) {
        let op = ops[i];
        let type = op:type;
        if (type == "inc") {
            tape_inc(tape, op:value);
        } else if (type == "move") {
            tape_move(tape, op:value);
        } else if (type == "print") {
            print(chr(tape_get(tape)));
        } else if (type == "loop") {
            while (tape_get(tape) != 0) {
                run(op:value, tape);
            }
        }
    }
}

let args = argv();
if (Array.length(args) != 3) {
    println("Usage: ./cbcvm bf3.rbcvm <program>");
} else {
    let it = string_iterator(read_file(args[2]));
    run(parse(it), tape_new());
}
